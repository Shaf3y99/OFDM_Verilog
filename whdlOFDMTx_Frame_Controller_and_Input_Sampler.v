// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Frame_Controller_and_Input_Sampler.v
// Created: 2023-05-02 12:36:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Frame_Controller_and_Input_Sampler
// Source Path: whdlOFDMTx/Frame Controller and Input Sampler
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Frame_Controller_and_Input_Sampler
          (clk,
           reset,
           enb_1_2_0,
           modInd,
           codeInd,
           data,
           valid,
           preambleSet,
           headerSet,
           modIndex,
           codeIndex,
           trBlkSize,
           loadSymMod,
           dataSet,
           resetRAM,
           dataOut,
           dataValid,
           ofdmModReady,
           ready);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   [1:0] modInd;  // ufix2
  input   [1:0] codeInd;  // ufix2
  input   data;
  input   valid;
  output  preambleSet;
  output  headerSet;
  output  [1:0] modIndex;  // ufix2
  output  [1:0] codeIndex;  // ufix2
  output  [13:0] trBlkSize;  // ufix14
  output  loadSymMod;
  output  dataSet;
  output  resetRAM;
  output  dataOut;
  output  dataValid;
  output  ofdmModReady;
  output  ready;


  reg [1:0] Delay1_out1;  // ufix2
  reg [1:0] Delay2_out1;  // ufix2
  wire [1:0] Input_Sampler_out2;  // ufix2
  reg [1:0] Delay11_out1;  // ufix2
  reg  Delay3_out1;
  wire [1:0] Input_Sampler_out1;  // ufix2
  wire Input_Sampler_out3;
  reg [1:0] Delay10_out1;  // ufix2
  wire [13:0] Transport_Block_Size_LUT_dout_low;  // ufix14
  wire [1:0] Transport_Block_Size_LUT_k1inc;  // ufix2
  wire [1:0] Transport_Block_Size_LUT_k2inc;  // ufix2
  wire [13:0] Transport_Block_Size_LUT_dout_right;  // ufix14
  wire [13:0] Transport_Block_Size_LUT_delta1;  // ufix14
  wire [1:0] Transport_Block_Size_LUT_k;  // ufix2
  wire [31:0] Transport_Block_Size_LUT_f;  // ufix32_En32
  wire [1:0] Transport_Block_Size_LUT_k_1;  // ufix2
  wire [31:0] Transport_Block_Size_LUT_f_1;  // ufix32_En32
  wire [13:0] Transport_Block_Size_LUT_1 [0:15];  // ufix14 [16]
  wire signed [2:0] Transport_Block_Size_LUT_add_cast;  // sfix3_E2
  wire signed [34:0] Transport_Block_Size_LUT_add_cast_1;  // sfix35
  wire signed [2:0] Transport_Block_Size_LUT_add_cast_2;  // sfix3_E2
  wire signed [34:0] Transport_Block_Size_LUT_add_cast_3;  // sfix35
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_4;  // sfix49_En32
  wire signed [32:0] Transport_Block_Size_LUT_cast;  // sfix33_En32
  wire signed [2:0] Transport_Block_Size_LUT_add_cast_5;  // sfix3_E2
  wire signed [34:0] Transport_Block_Size_LUT_add_cast_6;  // sfix35
  wire signed [14:0] Transport_Block_Size_LUT_sub_temp;  // sfix15
  wire signed [47:0] Transport_Block_Size_LUT_mul_temp;  // sfix48_En32
  wire signed [46:0] Transport_Block_Size_LUT_add_cast_7;  // sfix47_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_8;  // sfix49_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_temp;  // sfix49_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_9;  // sfix49_En32
  wire signed [32:0] Transport_Block_Size_LUT_cast_1;  // sfix33_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_10;  // sfix49_En32
  wire signed [32:0] Transport_Block_Size_LUT_cast_2;  // sfix33_En32
  wire signed [2:0] Transport_Block_Size_LUT_add_cast_11;  // sfix3_E2
  wire signed [34:0] Transport_Block_Size_LUT_add_cast_12;  // sfix35
  wire signed [14:0] Transport_Block_Size_LUT_sub_temp_1;  // sfix15
  wire signed [47:0] Transport_Block_Size_LUT_mul_temp_1;  // sfix48_En32
  wire signed [46:0] Transport_Block_Size_LUT_add_cast_13;  // sfix47_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_14;  // sfix49_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_temp_1;  // sfix49_En32
  wire [13:0] Transport_Block_Size_LUT_sub_cast;  // ufix14
  wire signed [14:0] Transport_Block_Size_LUT_sub_temp_2;  // sfix15
  wire signed [47:0] Transport_Block_Size_LUT_mul_temp_2;  // sfix48_En32
  wire signed [46:0] Transport_Block_Size_LUT_add_cast_15;  // sfix47_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_cast_16;  // sfix49_En32
  wire signed [48:0] Transport_Block_Size_LUT_add_temp_2;  // sfix49_En32
  wire signed [14:0] Transport_Block_Size_LUT_2;  // sfix15
  wire signed [14:0] Transport_Block_Size_LUT_3;  // sfix15
  wire signed [14:0] Transport_Block_Size_LUT_4;  // sfix15
  wire signed [14:0] Transport_Block_Size_LUT_5;  // sfix15
  wire signed [14:0] Transport_Block_Size_LUT_6;  // sfix15
  wire signed [14:0] Transport_Block_Size_LUT_7;  // sfix15
  wire [13:0] Transport_Block_Size_LUT_out1;  // ufix14
  wire Frame_Controller_out1;
  wire Frame_Controller_out2;
  wire Frame_Controller_out3;
  wire Frame_Controller_out4;
  wire out;
  wire Frame_Controller_out6;
  wire Enable_Header_and_Preamble_out1;
  wire out_1;
  reg  Delay8_out1;
  reg  Delay9_out1;
  reg  Delay15_out1;
  reg  Delay6_out1;
  reg  Delay14_out1;
  reg  Delay5_out1;
  reg  Delay13_out1;
  reg  Delay17_out1;
  reg  Delay18_out1;
  reg  Delay4_out1;
  reg  Delay12_out1;
  reg  Delay7_out1;
  reg  Delay16_out1;

  // Select transport block size of the current frame based on the modTypeIndex and codeRateIndex values.


  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 2'b00;
      end
      else begin
        if (enb_1_2_0) begin
          Delay1_out1 <= modInd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 2'b00;
      end
      else begin
        if (enb_1_2_0) begin
          Delay2_out1 <= codeInd;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 2'b00;
      end
      else begin
        if (enb_1_2_0) begin
          Delay11_out1 <= Input_Sampler_out2;
        end
      end
    end



  whdlOFDMTx_Input_Sampler u_Input_Sampler (.clk(clk),
                                            .reset(reset),
                                            .enb_1_2_0(enb_1_2_0),
                                            .modInd(Delay1_out1),  // ufix2
                                            .codeInd(Delay2_out1),  // ufix2
                                            .sampleInParam(Delay3_out1),
                                            .modIndex(Input_Sampler_out1),  // ufix2
                                            .codeIndex(Input_Sampler_out2),  // ufix2
                                            .loadSymMod(Input_Sampler_out3)
                                            );

  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 2'b00;
      end
      else begin
        if (enb_1_2_0) begin
          Delay10_out1 <= Input_Sampler_out1;
        end
      end
    end



  assign Transport_Block_Size_LUT_1[0] = 14'b00001110011010;
  assign Transport_Block_Size_LUT_1[1] = 14'b00011101011010;
  assign Transport_Block_Size_LUT_1[2] = 14'b00111011011010;
  assign Transport_Block_Size_LUT_1[3] = 14'b01011001011010;
  assign Transport_Block_Size_LUT_1[4] = 14'b00010011011010;
  assign Transport_Block_Size_LUT_1[5] = 14'b00100111011010;
  assign Transport_Block_Size_LUT_1[6] = 14'b01001111011010;
  assign Transport_Block_Size_LUT_1[7] = 14'b01110111011010;
  assign Transport_Block_Size_LUT_1[8] = 14'b00010101111010;
  assign Transport_Block_Size_LUT_1[9] = 14'b00101100011010;
  assign Transport_Block_Size_LUT_1[10] = 14'b01011001011010;
  assign Transport_Block_Size_LUT_1[11] = 14'b10000110011010;
  assign Transport_Block_Size_LUT_1[12] = 14'b00011000011010;
  assign Transport_Block_Size_LUT_1[13] = 14'b00110001011010;
  assign Transport_Block_Size_LUT_1[14] = 14'b01100011011010;
  assign Transport_Block_Size_LUT_1[15] = 14'b10010101011010;
  assign Transport_Block_Size_LUT_k = (Delay10_out1 == 2'b00 ? 2'b00 :
              (Delay10_out1 == 2'b11 ? 2'b11 :
              Delay10_out1));
  assign Transport_Block_Size_LUT_f = ((Delay10_out1 == 2'b00) || (Delay10_out1 == 2'b11) ? 32'b00000000000000000000000000000000 :
              32'b00000000000000000000000000000000);
  assign Transport_Block_Size_LUT_k_1 = (Delay11_out1 == 2'b00 ? 2'b00 :
              (Delay11_out1 == 2'b11 ? 2'b11 :
              Delay11_out1));
  assign Transport_Block_Size_LUT_f_1 = ((Delay11_out1 == 2'b00) || (Delay11_out1 == 2'b11) ? 32'b00000000000000000000000000000000 :
              32'b00000000000000000000000000000000);
  assign Transport_Block_Size_LUT_add_cast = {1'b0, Transport_Block_Size_LUT_k_1};
  assign Transport_Block_Size_LUT_add_cast_1 = {{30{Transport_Block_Size_LUT_add_cast[2]}}, {Transport_Block_Size_LUT_add_cast, 2'b00}};
  assign Transport_Block_Size_LUT_dout_low = Transport_Block_Size_LUT_1[$signed({1'b0, Transport_Block_Size_LUT_k}) + Transport_Block_Size_LUT_add_cast_1];
  assign Transport_Block_Size_LUT_k1inc = (Transport_Block_Size_LUT_k == 2'b11 ? Transport_Block_Size_LUT_k :
              Transport_Block_Size_LUT_k + 2'b01);
  assign Transport_Block_Size_LUT_k2inc = (Transport_Block_Size_LUT_k_1 == 2'b11 ? Transport_Block_Size_LUT_k_1 :
              Transport_Block_Size_LUT_k_1 + 2'b01);
  assign Transport_Block_Size_LUT_add_cast_2 = {1'b0, Transport_Block_Size_LUT_k2inc};
  assign Transport_Block_Size_LUT_add_cast_3 = {{30{Transport_Block_Size_LUT_add_cast_2[2]}}, {Transport_Block_Size_LUT_add_cast_2, 2'b00}};
  assign Transport_Block_Size_LUT_dout_right = Transport_Block_Size_LUT_1[$signed({1'b0, Transport_Block_Size_LUT_k}) + Transport_Block_Size_LUT_add_cast_3];
  assign Transport_Block_Size_LUT_add_cast_4 = {3'b0, {Transport_Block_Size_LUT_dout_low, 32'b00000000000000000000000000000000}};
  assign Transport_Block_Size_LUT_cast = {1'b0, Transport_Block_Size_LUT_f};
  assign Transport_Block_Size_LUT_add_cast_5 = {1'b0, Transport_Block_Size_LUT_k_1};
  assign Transport_Block_Size_LUT_add_cast_6 = {{30{Transport_Block_Size_LUT_add_cast_5[2]}}, {Transport_Block_Size_LUT_add_cast_5, 2'b00}};
  assign Transport_Block_Size_LUT_2 = {1'b0, Transport_Block_Size_LUT_1[$signed({1'b0, Transport_Block_Size_LUT_k1inc}) + Transport_Block_Size_LUT_add_cast_6]};
  assign Transport_Block_Size_LUT_3 = {1'b0, Transport_Block_Size_LUT_dout_low};
  assign Transport_Block_Size_LUT_sub_temp = Transport_Block_Size_LUT_2 - Transport_Block_Size_LUT_3;
  assign Transport_Block_Size_LUT_mul_temp = Transport_Block_Size_LUT_cast * Transport_Block_Size_LUT_sub_temp;
  assign Transport_Block_Size_LUT_add_cast_7 = Transport_Block_Size_LUT_mul_temp[46:0];
  assign Transport_Block_Size_LUT_add_cast_8 = {{2{Transport_Block_Size_LUT_add_cast_7[46]}}, Transport_Block_Size_LUT_add_cast_7};
  assign Transport_Block_Size_LUT_add_temp = Transport_Block_Size_LUT_add_cast_4 + Transport_Block_Size_LUT_add_cast_8;
  assign Transport_Block_Size_LUT_delta1 = Transport_Block_Size_LUT_add_temp[45:32];
  assign Transport_Block_Size_LUT_add_cast_9 = {3'b0, {Transport_Block_Size_LUT_delta1, 32'b00000000000000000000000000000000}};
  assign Transport_Block_Size_LUT_cast_1 = {1'b0, Transport_Block_Size_LUT_f_1};
  assign Transport_Block_Size_LUT_add_cast_10 = {3'b0, {Transport_Block_Size_LUT_dout_right, 32'b00000000000000000000000000000000}};
  assign Transport_Block_Size_LUT_cast_2 = {1'b0, Transport_Block_Size_LUT_f};
  assign Transport_Block_Size_LUT_add_cast_11 = {1'b0, Transport_Block_Size_LUT_k2inc};
  assign Transport_Block_Size_LUT_add_cast_12 = {{30{Transport_Block_Size_LUT_add_cast_11[2]}}, {Transport_Block_Size_LUT_add_cast_11, 2'b00}};
  assign Transport_Block_Size_LUT_4 = {1'b0, Transport_Block_Size_LUT_1[$signed({1'b0, Transport_Block_Size_LUT_k1inc}) + Transport_Block_Size_LUT_add_cast_12]};
  assign Transport_Block_Size_LUT_5 = {1'b0, Transport_Block_Size_LUT_dout_right};
  assign Transport_Block_Size_LUT_sub_temp_1 = Transport_Block_Size_LUT_4 - Transport_Block_Size_LUT_5;
  assign Transport_Block_Size_LUT_mul_temp_1 = Transport_Block_Size_LUT_cast_2 * Transport_Block_Size_LUT_sub_temp_1;
  assign Transport_Block_Size_LUT_add_cast_13 = Transport_Block_Size_LUT_mul_temp_1[46:0];
  assign Transport_Block_Size_LUT_add_cast_14 = {{2{Transport_Block_Size_LUT_add_cast_13[46]}}, Transport_Block_Size_LUT_add_cast_13};
  assign Transport_Block_Size_LUT_add_temp_1 = Transport_Block_Size_LUT_add_cast_10 + Transport_Block_Size_LUT_add_cast_14;
  assign Transport_Block_Size_LUT_sub_cast = Transport_Block_Size_LUT_add_temp_1[45:32];
  assign Transport_Block_Size_LUT_6 = {1'b0, Transport_Block_Size_LUT_sub_cast};
  assign Transport_Block_Size_LUT_7 = {1'b0, Transport_Block_Size_LUT_delta1};
  assign Transport_Block_Size_LUT_sub_temp_2 = Transport_Block_Size_LUT_6 - Transport_Block_Size_LUT_7;
  assign Transport_Block_Size_LUT_mul_temp_2 = Transport_Block_Size_LUT_cast_1 * Transport_Block_Size_LUT_sub_temp_2;
  assign Transport_Block_Size_LUT_add_cast_15 = Transport_Block_Size_LUT_mul_temp_2[46:0];
  assign Transport_Block_Size_LUT_add_cast_16 = {{2{Transport_Block_Size_LUT_add_cast_15[46]}}, Transport_Block_Size_LUT_add_cast_15};
  assign Transport_Block_Size_LUT_add_temp_2 = Transport_Block_Size_LUT_add_cast_9 + Transport_Block_Size_LUT_add_cast_16;
  assign Transport_Block_Size_LUT_out1 = Transport_Block_Size_LUT_add_temp_2[45:32];



  whdlOFDMTx_Frame_Controller u_Frame_Controller (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_2_0(enb_1_2_0),
                                                  .valid(valid),
                                                  .trBlkSize(Transport_Block_Size_LUT_out1),  // ufix14
                                                  .sampleInParam(Frame_Controller_out1),
                                                  .dataValid(Frame_Controller_out2),
                                                  .resetRAM(Frame_Controller_out3),
                                                  .dataSet(Frame_Controller_out4),
                                                  .ofdmModReady(out),
                                                  .ready(Frame_Controller_out6)
                                                  );

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay3_out1 <= Frame_Controller_out1;
        end
      end
    end



  whdlOFDMTx_Enable_Header_and_Preamble u_Enable_Header_and_Preamble (.clk(clk),
                                                                      .reset(reset),
                                                                      .enb_1_2_0(enb_1_2_0),
                                                                      .sampleInParam(Delay3_out1),
                                                                      .headerSet(Enable_Header_and_Preamble_out1),
                                                                      .preambleSet(out_1)
                                                                      );

  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay8_out1 <= out_1;
        end
      end
    end



  assign preambleSet = Delay8_out1;

  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay9_out1 <= Enable_Header_and_Preamble_out1;
        end
      end
    end



  assign headerSet = Delay9_out1;

  assign modIndex = Delay10_out1;

  assign codeIndex = Delay11_out1;

  assign trBlkSize = Transport_Block_Size_LUT_out1;

  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay15_out1 <= Input_Sampler_out3;
        end
      end
    end



  assign loadSymMod = Delay15_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay6_out1 <= Frame_Controller_out4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay14_out1 <= Delay6_out1;
        end
      end
    end



  assign dataSet = Delay14_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay5_out1 <= Frame_Controller_out3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay13_out1 <= Delay5_out1;
        end
      end
    end



  assign resetRAM = Delay13_out1;

  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay17_out1 <= data;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay18_out1 <= Delay17_out1;
        end
      end
    end



  assign dataOut = Delay18_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay4_out1 <= Frame_Controller_out2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay12_out1 <= Delay4_out1;
        end
      end
    end



  assign dataValid = Delay12_out1;

  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay7_out1 <= out;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay16_out1 <= Delay7_out1;
        end
      end
    end



  assign ofdmModReady = Delay16_out1;

  assign ready = Frame_Controller_out6;

endmodule  // whdlOFDMTx_Frame_Controller_and_Input_Sampler

