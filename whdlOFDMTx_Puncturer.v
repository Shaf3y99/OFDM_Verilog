// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Puncturer.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Puncturer
// Source Path: whdlOFDMTx/Frame Generator/Data/Data Chain/Puncturer
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Puncturer
          (clk,
           reset,
           enb_1_2_0,
           data_0,
           data_1,
           puncVector_0,
           puncVector_1,
           puncVector_2,
           puncVector_3,
           puncVector_4,
           puncVector_5,
           puncVector_6,
           puncVector_7,
           puncVector_8,
           puncVector_9,
           ctrl_start,
           ctrl_end,
           ctrl_valid,
           data1_0,
           data1_1,
           ctrl1_valid);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   data_0;
  input   data_1;
  input   puncVector_0;
  input   puncVector_1;
  input   puncVector_2;
  input   puncVector_3;
  input   puncVector_4;
  input   puncVector_5;
  input   puncVector_6;
  input   puncVector_7;
  input   puncVector_8;
  input   puncVector_9;
  input   ctrl_start;
  input   ctrl_end;
  input   ctrl_valid;
  output  data1_0;
  output  data1_1;
  output  ctrl1_valid;


  wire ctrl1_start;
  wire ctrl1_end;
  reg  obj_startReg1;
  reg  obj_startReg2;
  reg  obj_validReg1;
  reg  obj_validReg2;
  wire tmp;
  reg  [0:1] obj_endReg2_reg_reg;  // ufix1 [2]
  wire [0:1] obj_endReg2_reg_reg_next;  // ufix1 [2]
  wire obj_endReg2;
  wire obj_frameOn;
  wire tmp_1;
  wire obj_frameOn_1;
  reg  obj_frameOn_2;
  wire tmp_2;
  wire tmp_3;
  wire tmp_4;
  wire tmp_5;
  wire tmp_6;
  wire obj_endFlag;
  wire tmp_7;
  wire [0:1] Null_rsvd;  // boolean [2]
  wire [0:1] Null_rsvd_1;  // boolean [2]
  wire [0:1] subVector;  // boolean [2]
  wire tmp_8;
  wire reset_1;
  wire reset_2;
  wire tmp_9;
  wire [0:9] puncVecD;  // boolean [10]
  wire [0:9] puncVector;  // boolean [10]
  wire [0:9] obj_puncVecBuf;  // boolean [10]
  wire [0:9] obj_puncVecBuf_1;  // boolean [10]
  reg  [0:9] obj_puncVecBuf_reg_reg;  // ufix1 [10]
  wire [0:9] obj_puncVecBuf_reg_reg_next;  // ufix1 [10]
  wire [0:9] puncVecD_1;  // boolean [10]
  wire [0:9] puncVecD_2;  // boolean [10]
  wire [0:9] tmp_10;  // boolean [10]
  wire [0:9] obj_puncVec;  // boolean [10]
  wire [0:9] obj_puncVec_1;  // boolean [10]
  reg  [0:9] obj_puncVec_reg_reg;  // ufix1 [10]
  wire [0:9] obj_puncVec_reg_reg_next;  // ufix1 [10]
  wire [0:9] puncVecD_3;  // boolean [10]
  wire [4:0] initPosDD;  // ufix5
  wire toggle;
  reg [4:0] initPosDD_1;  // ufix5
  reg [4:0] obj_initPos;  // ufix5
  wire [4:0] tmp_11;  // ufix5
  wire [4:0] tmp_12;  // ufix5
  wire [4:0] tmp_13;  // ufix5
  reg [4:0] obj_vecInd;  // ufix5
  wire [4:0] tmp_14;  // ufix5
  wire flag;
  wire [4:0] tmp_15;  // ufix5
  wire [4:0] tmp_16;  // ufix5
  wire [4:0] tmp_17;  // ufix5
  reg  [0:1] subVector_1;  // boolean [2]
  wire [0:1] subVecD;  // boolean [2]
  wire [0:1] subVecD_1;  // boolean [2]
  wire [0:1] obj_subVec;  // boolean [2]
  wire [0:1] obj_subVec_1;  // boolean [2]
  wire [0:1] obj_subVec_2;  // boolean [2]
  wire [0:1] tmp_18;  // boolean [2]
  reg  [0:1] obj_subVec_reg_reg;  // ufix1 [2]
  wire [0:1] obj_subVec_reg_reg_next;  // ufix1 [2]
  wire tmp_19;
  wire tmp_20;
  wire tmp_21;
  wire tmp_22;
  wire [3:0] tmp_23;  // ufix4
  wire [3:0] regInd1D;  // ufix4
  wire obj_endFlag_1;
  wire obj_endFlag_2;
  wire tmp_24;
  wire obj_endFlag_3;
  wire [3:0] tmp_25;  // ufix4
  wire [3:0] tmp_26;  // ufix4
  wire [3:0] tmp_27;  // ufix4
  wire [3:0] tmp_28;  // ufix4
  wire [3:0] tmp_29;  // ufix4
  wire [3:0] tmp_30;  // ufix4
  wire tmp_31;
  wire [3:0] tmp_32;  // ufix4
  reg  obj_endFlag_4;
  reg [3:0] obj_regInd1;  // ufix4
  wire [3:0] tmp_33;  // ufix4
  wire tmp_34;
  wire [3:0] tmp_35;  // ufix4
  wire [3:0] tmp_36;  // ufix4
  wire [3:0] tmp_37;  // ufix4
  wire [3:0] tmp_38;  // ufix4
  wire tmp_39;
  wire tmp_40;
  wire tmp_41;
  wire tmp_42;
  wire tmp_43;
  wire tmp_44;
  wire tmp_45;
  wire tmp_46;
  wire tmp_47;
  wire validtemp;
  wire validtemp_1;
  wire tmp_48;
  wire validtemp_2;
  wire tmp_49;
  wire tmp_50;
  wire out;
  wire tmp_51;
  wire obj_validOut;
  wire out_1;
  wire tmp_52;
  wire tmp_53;
  wire NonZero;
  wire tmp_54;
  wire tmp_55;
  wire tmp_56;
  wire tmp_57;
  reg  obj_validOut_1;
  wire [0:1] varargout_1;  // boolean [2]
  wire tmp_58;
  wire [0:1] dataOutD;  // boolean [2]
  wire [0:1] dataOutD_1;  // boolean [2]
  wire tmp_59;
  wire [0:1] dataOutD_2;  // boolean [2]
  wire [0:1] dataOutD_3;  // boolean [2]
  wire tmp_60;
  wire tmp_61;
  wire tmp_62;
  wire tmp_63;
  wire tmp_64;
  wire tmp_65;
  wire [0:3] tmp_66;  // boolean [4]
  wire [0:3] dataReg1D;  // boolean [4]
  wire [0:3] dataReg1D_1;  // boolean [4]
  wire [0:3] dataReg1D_2;  // boolean [4]
  wire [0:3] reg_rsvd;  // boolean [4]
  wire [0:1] data;  // boolean [2]
  wire [0:1] tmp_67;  // boolean [2]
  wire [0:1] obj_dataInBuf1;  // boolean [2]
  wire [0:1] obj_dataInBuf1_1;  // boolean [2]
  reg  [0:1] obj_dataInBuf1_reg_reg;  // ufix1 [2]
  wire [0:1] obj_dataInBuf1_reg_reg_next;  // ufix1 [2]
  wire [0:1] obj_dataInBuf2;  // boolean [2]
  wire [0:1] obj_dataInBuf2_1;  // boolean [2]
  reg  [0:1] obj_dataInBuf2_reg_reg;  // ufix1 [2]
  wire [0:1] obj_dataInBuf2_reg_reg_next;  // ufix1 [2]
  wire tmp_68;
  wire signed [31:0] tmp_69;  // int32
  wire [3:0] p154tmp_add_temp;  // ufix4
  wire signed [31:0] p154tmp_1;  // int32
  wire tmp_70;
  wire signed [31:0] tmp_71;  // int32
  wire [3:0] p145tmp_add_temp;  // ufix4
  wire signed [31:0] p145tmp_1;  // int32
  wire [0:3] obj_dataReg2;  // boolean [4]
  wire [0:3] obj_dataReg2_1;  // boolean [4]
  reg  [0:3] obj_dataReg2_reg_reg;  // ufix1 [4]
  wire [0:3] obj_dataReg2_reg_reg_next;  // ufix1 [4]
  wire [0:3] obj_dataReg2_2;  // boolean [4]
  wire [0:3] tmp_72;  // boolean [4]
  reg  [0:3] reg_rsvd_1;  // boolean [4]
  wire [0:3] reg_rsvd_2;  // boolean [4]
  reg  [0:3] reg_rsvd_3;  // boolean [4]
  wire [0:3] obj_dataReg1;  // boolean [4]
  wire [0:3] obj_dataReg1_1;  // boolean [4]
  wire [0:3] tmp_73;  // boolean [4]
  reg  [0:3] obj_dataReg1_2;  // boolean [4]
  wire [0:3] obj_dataReg1_3;  // boolean [4]
  wire [0:3] tmp_74;  // boolean [4]
  wire [0:3] tmp_75;  // boolean [4]
  wire [0:3] tmp_76;  // boolean [4]
  wire [0:3] tmp_77;  // boolean [4]
  wire [0:3] obj_dataReg1_4;  // boolean [4]
  wire [0:3] tmp_78;  // boolean [4]
  reg  [0:3] obj_dataReg1_reg_reg;  // ufix1 [4]
  wire [0:3] obj_dataReg1_reg_reg_next;  // ufix1 [4]
  wire [0:3] dataReg1D_3;  // boolean [4]
  wire [0:3] tmp_79;  // boolean [4]
  wire [0:3] tmp_80;  // boolean [4]
  wire [0:1] dataOutD_4;  // boolean [2]
  wire [0:1] dataOutD_5;  // boolean [2]
  wire [0:1] tmp_81;  // boolean [2]
  wire tmp_82;
  wire tmp_83;
  wire [3:0] tmp_84;  // ufix4
  wire [3:0] tmp_85;  // ufix4
  wire [3:0] tmp_86;  // ufix4
  reg [3:0] obj_regInd3;  // ufix4
  wire [3:0] tmp_87;  // ufix4
  wire [3:0] tmp_88;  // ufix4
  wire [3:0] tmp_89;  // ufix4
  wire tmp_90;
  wire tmp_91;
  wire [0:1] tempData;  // boolean [2]
  wire [0:1] tempData_1;  // boolean [2]
  wire tmp_92;
  wire tmp_93;
  wire [0:3] tmp_94;  // boolean [4]
  wire [0:3] tmp_95;  // boolean [4]
  wire [0:3] obj_dataReg3;  // boolean [4]
  wire [0:3] obj_dataReg3_1;  // boolean [4]
  reg  [0:3] obj_dataReg3_2;  // boolean [4]
  wire [0:3] tmp_96;  // boolean [4]
  wire [0:3] tmp_97;  // boolean [4]
  wire [0:3] obj_dataReg3_3;  // boolean [4]
  wire [0:3] tmp_98;  // boolean [4]
  reg  [0:3] obj_dataReg3_reg_reg;  // ufix1 [4]
  wire [0:3] obj_dataReg3_reg_reg_next;  // ufix1 [4]
  wire tmp_99;
  reg  [0:1] tempData_2;  // boolean [2]
  wire [0:1] tmp_100;  // boolean [2]
  wire [0:1] tempData_3;  // boolean [2]
  wire [0:1] tmp_101;  // boolean [2]
  wire [0:1] dataOutD_6;  // boolean [2]
  wire [0:1] dataOutD_7;  // boolean [2]
  wire tmp_102;
  wire [0:1] dataOutD_8;  // boolean [2]
  wire tmp_103;
  wire tmp_104;
  wire [0:1] tempData_4;  // boolean [2]
  wire [0:1] tempData_5;  // boolean [2]
  wire tmp_105;
  reg  [0:1] tempData_6;  // boolean [2]
  wire [0:1] tmp_106;  // boolean [2]
  wire [0:1] tempData_7;  // boolean [2]
  wire [0:1] tmp_107;  // boolean [2]
  wire tmp_108;
  wire [0:1] tmp_109;  // boolean [2]
  wire [0:1] tmp_110;  // boolean [2]
  wire [0:1] dataOutD_9;  // boolean [2]
  wire [0:1] dataOutD_10;  // boolean [2]
  wire [0:1] dataOutD_11;  // boolean [2]
  wire [0:1] tmp_111;  // boolean [2]
  wire [0:1] tmp_112;  // boolean [2]
  wire [0:1] tmp_113;  // boolean [2]
  wire [0:1] tmp_114;  // boolean [2]
  wire [0:1] tmp_115;  // boolean [2]
  wire [0:1] dataOutD_12;  // boolean [2]
  wire [0:1] dataOutD_13;  // boolean [2]
  wire tmp_116;
  wire tmp_117;
  wire [0:1] tempData_8;  // boolean [2]
  wire [0:1] tempData_9;  // boolean [2]
  wire tmp_118;
  reg  [0:1] tempData_10;  // boolean [2]
  wire [0:1] tmp_119;  // boolean [2]
  wire [0:1] tempData_11;  // boolean [2]
  wire [0:1] tmp_120;  // boolean [2]
  wire [0:1] dataOutD_14;  // boolean [2]
  wire [0:1] dataOutD_15;  // boolean [2]
  wire [0:1] tmp_121;  // boolean [2]
  wire [0:1] tmp_122;  // boolean [2]
  wire [0:1] tmp_123;  // boolean [2]
  wire [0:1] obj_dataOut;  // boolean [2]
  wire [0:1] obj_dataOut_1;  // boolean [2]
  reg  [0:1] obj_dataOut_reg_reg;  // ufix1 [2]
  wire [0:1] obj_dataOut_reg_reg_next;  // ufix1 [2]
  wire [0:1] varargout_1_1;  // boolean [2]
  wire [0:1] tmp_124;  // boolean [2]
  wire [0:1] varargout_1_2;  // boolean [2]
  wire [0:1] data_2;  // boolean [2]
  wire tmp_125;
  wire tmp_126;
  wire tmp_127;
  wire tmp_128;
  wire validtemp_3;
  wire validtemp_4;
  wire tmp_129;
  wire validtemp_5;
  wire tmp_130;
  wire obj_startFlag;
  wire obj_startFlag_1;
  wire tmp_131;
  wire obj_startFlag_2;
  reg  obj_startFlag_3;
  wire tmp_132;
  wire tmp_133;
  wire tmp_134;
  wire tmp_135;
  wire tmp_136;
  wire tmp_137;
  wire tmp_138;
  wire validtemp_6;
  wire validtemp_7;
  wire tmp_139;
  wire validtemp_8;
  wire tmp_140;
  wire tmp_141;
  wire obj_startOut;
  wire tmp_142;
  wire out_2;
  wire tmp_143;
  wire obj_startOut_1;
  wire obj_startOut_2;
  wire tmp_144;
  wire tmp_145;
  wire out_3;
  wire tmp_146;
  wire tmp_147;
  wire tmp_148;
  wire tmp_149;
  wire obj_startOut_3;
  wire tmp_150;
  reg  obj_startOut_4;
  wire tmp_151;
  wire tmp_152;
  wire obj_endOut;
  wire tmp_153;
  wire endtemp;
  wire endtemp_1;
  wire tmp_154;
  wire tmp_155;
  wire out_4;
  wire tmp_156;
  wire out_5;
  wire tmp_157;
  wire tmp_158;
  wire tmp_159;
  wire tmp_160;
  wire tmp_161;
  reg  obj_endOut_1;
  reg signed [31:0] p1_i;  // int32
  reg  p1_toggle;
  reg [4:0] p1_initPosDD;  // ufix5
  reg [4:0] p1_i_0;  // ufix5
  reg  p1_toggle_0;
  reg [4:0] p1_initPosDD_0;  // ufix5
  reg signed [63:0] p1_add_cast [0:4];  // sfix64 [5]
  reg signed [31:0] p1_add_cast_0 [0:4];  // int32 [5]
  reg signed [31:0] p1_add_temp [0:4];  // int32 [5]
  reg [5:0] p1_add_temp_0 [0:4];  // ufix6 [5]
  reg [5:0] p1_t_0 [0:4];  // ufix6 [5]
  reg [4:0] p47subVector_add_temp;  // ufix5


  always @(posedge clk or posedge reset)
    begin : obj_startReg1_reg_process
      if (reset == 1'b1) begin
        obj_startReg1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_startReg1 <= ctrl_start;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : obj_startReg2_reg_process
      if (reset == 1'b1) begin
        obj_startReg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_startReg2 <= obj_startReg1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : obj_validReg1_reg_process
      if (reset == 1'b1) begin
        obj_validReg1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validReg1 <= ctrl_valid;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : obj_validReg2_reg_process
      if (reset == 1'b1) begin
        obj_validReg2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validReg2 <= obj_validReg1;
        end
      end
    end



  assign tmp = obj_startReg2 && obj_validReg2;



  always @(posedge clk or posedge reset)
    begin : obj_endReg2_reg_process
      if (reset == 1'b1) begin
        obj_endReg2_reg_reg[0] <= 1'b0;
        obj_endReg2_reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_endReg2_reg_reg[0] <= obj_endReg2_reg_reg_next[0];
          obj_endReg2_reg_reg[1] <= obj_endReg2_reg_reg_next[1];
        end
      end
    end

  assign obj_endReg2 = obj_endReg2_reg_reg[1];
  assign obj_endReg2_reg_reg_next[0] = ctrl_end;
  assign obj_endReg2_reg_reg_next[1] = obj_endReg2_reg_reg[0];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp125_trueregionp1
  assign obj_frameOn = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl
  assign tmp_1 = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp100
  assign obj_frameOn_1 = 1'b1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp125
  assign tmp_2 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  assign tmp_3 = (tmp_2 == 1'b0 ? obj_frameOn_2 :
              obj_frameOn);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp100
  assign tmp_4 = (tmp == 1'b0 ? tmp_3 :
              tmp_1);



  assign tmp_5 = (tmp == 1'b0 ? tmp_4 :
              obj_frameOn_1);



  always @(posedge clk or posedge reset)
    begin : obj_frameOn_reg_process
      if (reset == 1'b1) begin
        obj_frameOn_2 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_frameOn_2 <= tmp_5;
        end
      end
    end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113
  assign tmp_6 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113_falseregionp1_trueregionp1
  assign obj_endFlag = 1'b0;



  assign tmp_7 = 1'b0;



  assign Null_rsvd = {2{1'b0}};



  assign Null_rsvd_1 = {32'sd2{tmp_7}};



  assign subVector = {2{1'b0}};



  assign tmp_8 = obj_startReg1 && obj_validReg1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp64
  assign reset_1 = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp64
  assign reset_2 = 1'b1;



  assign tmp_9 = (tmp_8 == 1'b0 ? reset_1 :
              reset_2);



  assign puncVecD = {10{1'b0}};



  assign puncVector[0] = puncVector_0;
  assign puncVector[1] = puncVector_1;
  assign puncVector[2] = puncVector_2;
  assign puncVector[3] = puncVector_3;
  assign puncVector[4] = puncVector_4;
  assign puncVector[5] = puncVector_5;
  assign puncVector[6] = puncVector_6;
  assign puncVector[7] = puncVector_7;
  assign puncVector[8] = puncVector_8;
  assign puncVector[9] = puncVector_9;

  assign obj_puncVecBuf_1 = puncVector;



  always @(posedge clk or posedge reset)
    begin : obj_puncVecBuf_reg_process
      if (reset == 1'b1) begin
        obj_puncVecBuf_reg_reg[0] <= 1'b0;
        obj_puncVecBuf_reg_reg[1] <= 1'b0;
        obj_puncVecBuf_reg_reg[2] <= 1'b0;
        obj_puncVecBuf_reg_reg[3] <= 1'b0;
        obj_puncVecBuf_reg_reg[4] <= 1'b0;
        obj_puncVecBuf_reg_reg[5] <= 1'b0;
        obj_puncVecBuf_reg_reg[6] <= 1'b0;
        obj_puncVecBuf_reg_reg[7] <= 1'b0;
        obj_puncVecBuf_reg_reg[8] <= 1'b0;
        obj_puncVecBuf_reg_reg[9] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_puncVecBuf_reg_reg[0] <= obj_puncVecBuf_reg_reg_next[0];
          obj_puncVecBuf_reg_reg[1] <= obj_puncVecBuf_reg_reg_next[1];
          obj_puncVecBuf_reg_reg[2] <= obj_puncVecBuf_reg_reg_next[2];
          obj_puncVecBuf_reg_reg[3] <= obj_puncVecBuf_reg_reg_next[3];
          obj_puncVecBuf_reg_reg[4] <= obj_puncVecBuf_reg_reg_next[4];
          obj_puncVecBuf_reg_reg[5] <= obj_puncVecBuf_reg_reg_next[5];
          obj_puncVecBuf_reg_reg[6] <= obj_puncVecBuf_reg_reg_next[6];
          obj_puncVecBuf_reg_reg[7] <= obj_puncVecBuf_reg_reg_next[7];
          obj_puncVecBuf_reg_reg[8] <= obj_puncVecBuf_reg_reg_next[8];
          obj_puncVecBuf_reg_reg[9] <= obj_puncVecBuf_reg_reg_next[9];
        end
      end
    end

  assign obj_puncVecBuf[0] = obj_puncVecBuf_reg_reg[0];
  assign obj_puncVecBuf[1] = obj_puncVecBuf_reg_reg[1];
  assign obj_puncVecBuf[2] = obj_puncVecBuf_reg_reg[2];
  assign obj_puncVecBuf[3] = obj_puncVecBuf_reg_reg[3];
  assign obj_puncVecBuf[4] = obj_puncVecBuf_reg_reg[4];
  assign obj_puncVecBuf[5] = obj_puncVecBuf_reg_reg[5];
  assign obj_puncVecBuf[6] = obj_puncVecBuf_reg_reg[6];
  assign obj_puncVecBuf[7] = obj_puncVecBuf_reg_reg[7];
  assign obj_puncVecBuf[8] = obj_puncVecBuf_reg_reg[8];
  assign obj_puncVecBuf[9] = obj_puncVecBuf_reg_reg[9];
  assign obj_puncVecBuf_reg_reg_next[0] = obj_puncVecBuf_1[0];
  assign obj_puncVecBuf_reg_reg_next[1] = obj_puncVecBuf_1[1];
  assign obj_puncVecBuf_reg_reg_next[2] = obj_puncVecBuf_1[2];
  assign obj_puncVecBuf_reg_reg_next[3] = obj_puncVecBuf_1[3];
  assign obj_puncVecBuf_reg_reg_next[4] = obj_puncVecBuf_1[4];
  assign obj_puncVecBuf_reg_reg_next[5] = obj_puncVecBuf_1[5];
  assign obj_puncVecBuf_reg_reg_next[6] = obj_puncVecBuf_1[6];
  assign obj_puncVecBuf_reg_reg_next[7] = obj_puncVecBuf_1[7];
  assign obj_puncVecBuf_reg_reg_next[8] = obj_puncVecBuf_1[8];
  assign obj_puncVecBuf_reg_reg_next[9] = obj_puncVecBuf_1[9];



  assign puncVecD_1 = {10{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp59
  assign puncVecD_2 = obj_puncVecBuf;



  assign obj_puncVec_1 = tmp_10;



  always @(posedge clk or posedge reset)
    begin : obj_puncVec_reg_process
      if (reset == 1'b1) begin
        obj_puncVec_reg_reg[0] <= 1'b0;
        obj_puncVec_reg_reg[1] <= 1'b0;
        obj_puncVec_reg_reg[2] <= 1'b0;
        obj_puncVec_reg_reg[3] <= 1'b0;
        obj_puncVec_reg_reg[4] <= 1'b0;
        obj_puncVec_reg_reg[5] <= 1'b0;
        obj_puncVec_reg_reg[6] <= 1'b0;
        obj_puncVec_reg_reg[7] <= 1'b0;
        obj_puncVec_reg_reg[8] <= 1'b0;
        obj_puncVec_reg_reg[9] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_puncVec_reg_reg[0] <= obj_puncVec_reg_reg_next[0];
          obj_puncVec_reg_reg[1] <= obj_puncVec_reg_reg_next[1];
          obj_puncVec_reg_reg[2] <= obj_puncVec_reg_reg_next[2];
          obj_puncVec_reg_reg[3] <= obj_puncVec_reg_reg_next[3];
          obj_puncVec_reg_reg[4] <= obj_puncVec_reg_reg_next[4];
          obj_puncVec_reg_reg[5] <= obj_puncVec_reg_reg_next[5];
          obj_puncVec_reg_reg[6] <= obj_puncVec_reg_reg_next[6];
          obj_puncVec_reg_reg[7] <= obj_puncVec_reg_reg_next[7];
          obj_puncVec_reg_reg[8] <= obj_puncVec_reg_reg_next[8];
          obj_puncVec_reg_reg[9] <= obj_puncVec_reg_reg_next[9];
        end
      end
    end

  assign obj_puncVec[0] = obj_puncVec_reg_reg[0];
  assign obj_puncVec[1] = obj_puncVec_reg_reg[1];
  assign obj_puncVec[2] = obj_puncVec_reg_reg[2];
  assign obj_puncVec[3] = obj_puncVec_reg_reg[3];
  assign obj_puncVec[4] = obj_puncVec_reg_reg[4];
  assign obj_puncVec[5] = obj_puncVec_reg_reg[5];
  assign obj_puncVec[6] = obj_puncVec_reg_reg[6];
  assign obj_puncVec[7] = obj_puncVec_reg_reg[7];
  assign obj_puncVec[8] = obj_puncVec_reg_reg[8];
  assign obj_puncVec[9] = obj_puncVec_reg_reg[9];
  assign obj_puncVec_reg_reg_next[0] = obj_puncVec_1[0];
  assign obj_puncVec_reg_reg_next[1] = obj_puncVec_1[1];
  assign obj_puncVec_reg_reg_next[2] = obj_puncVec_1[2];
  assign obj_puncVec_reg_reg_next[3] = obj_puncVec_1[3];
  assign obj_puncVec_reg_reg_next[4] = obj_puncVec_1[4];
  assign obj_puncVec_reg_reg_next[5] = obj_puncVec_1[5];
  assign obj_puncVec_reg_reg_next[6] = obj_puncVec_1[6];
  assign obj_puncVec_reg_reg_next[7] = obj_puncVec_1[7];
  assign obj_puncVec_reg_reg_next[8] = obj_puncVec_1[8];
  assign obj_puncVec_reg_reg_next[9] = obj_puncVec_1[9];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp59
  assign puncVecD_3 = obj_puncVec;



  assign tmp_10[0] = (tmp_9 == 1'b0 ? puncVecD_3[0] :
              puncVecD_2[0]);
  assign tmp_10[1] = (tmp_9 == 1'b0 ? puncVecD_3[1] :
              puncVecD_2[1]);
  assign tmp_10[2] = (tmp_9 == 1'b0 ? puncVecD_3[2] :
              puncVecD_2[2]);
  assign tmp_10[3] = (tmp_9 == 1'b0 ? puncVecD_3[3] :
              puncVecD_2[3]);
  assign tmp_10[4] = (tmp_9 == 1'b0 ? puncVecD_3[4] :
              puncVecD_2[4]);
  assign tmp_10[5] = (tmp_9 == 1'b0 ? puncVecD_3[5] :
              puncVecD_2[5]);
  assign tmp_10[6] = (tmp_9 == 1'b0 ? puncVecD_3[6] :
              puncVecD_2[6]);
  assign tmp_10[7] = (tmp_9 == 1'b0 ? puncVecD_3[7] :
              puncVecD_2[7]);
  assign tmp_10[8] = (tmp_9 == 1'b0 ? puncVecD_3[8] :
              puncVecD_2[8]);
  assign tmp_10[9] = (tmp_9 == 1'b0 ? puncVecD_3[9] :
              puncVecD_2[9]);



  assign initPosDD = 5'b00001;



  assign toggle = 1'b1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp55
  always @* begin
    p1_initPosDD_0 = 5'b00000;
    p1_toggle_0 = 1'b0;
    p1_i_0 = 5'b00000;
    p1_initPosDD = initPosDD;
    p1_toggle = toggle;

    for(p1_i = 32'sd0; p1_i <= 32'sd4; p1_i = p1_i + 32'sd1) begin
      p1_add_cast[p1_i] = {{31{p1_i[31]}}, {p1_i, 1'b0}};
      p1_add_cast_0[p1_i] = p1_add_cast[p1_i][31:0];
      p1_add_temp[p1_i] = p1_add_cast_0[p1_i] + 32'sd1;
      p1_i_0 = p1_add_temp[p1_i][4:0];
      p1_t_0[p1_i] = {1'b0, p1_i_0};
      p1_add_temp_0[p1_i] = p1_t_0[p1_i] + 6'b000001;
      if ((tmp_10[$signed({1'b0, p1_i_0}) - 32'sd1] || tmp_10[$signed({1'b0, p1_add_temp_0[p1_i]}) - 32'sd1]) && p1_toggle) begin
        p1_initPosDD_0 = p1_i_0;
        p1_toggle_0 = 1'b0;
      end
      else begin
        p1_initPosDD_0 = p1_initPosDD;
        p1_toggle_0 = p1_toggle;
      end
      p1_initPosDD = p1_initPosDD_0;
      p1_toggle = p1_toggle_0;
    end

    initPosDD_1 = p1_initPosDD;
  end



  assign tmp_11 = (obj_startReg1 == 1'b0 ? obj_initPos :
              initPosDD_1);



  assign tmp_13 = (obj_validReg1 == 1'b0 ? obj_initPos :
              tmp_12);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp55
  always @(posedge clk or posedge reset)
    begin : obj_initPos_reg_process
      if (reset == 1'b1) begin
        obj_initPos <= 5'b00001;
      end
      else begin
        if (enb_1_2_0) begin
          obj_initPos <= tmp_13;
        end
      end
    end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp40
  assign tmp_12 = (obj_validReg1 == 1'b0 ? obj_initPos :
              tmp_11);



  assign tmp_14 = obj_vecInd + 5'b00010;



  assign flag = obj_vecInd == 5'b01001;



  assign tmp_15 = (flag == 1'b0 ? tmp_14 :
              tmp_12);



  assign tmp_16 = (tmp_9 == 1'b0 ? tmp_15 :
              tmp_12);



  always @(posedge clk or posedge reset)
    begin : obj_vecInd_reg_process
      if (reset == 1'b1) begin
        obj_vecInd <= 5'b00001;
      end
      else begin
        if (enb_1_2_0) begin
          obj_vecInd <= tmp_17;
        end
      end
    end



  assign tmp_17 = (obj_validReg1 == 1'b0 ? obj_vecInd :
              tmp_16);



  always @* begin
    subVector_1 = subVector;
    subVector_1[0] = tmp_10[$signed({1'b0, tmp_17}) - 32'sd1];
    p47subVector_add_temp = tmp_17 + 5'b00001;
    subVector_1[1] = tmp_10[$signed({1'b0, p47subVector_add_temp}) - 32'sd1];
  end



  assign subVecD = {2{1'b0}};



  assign subVecD_1 = subVector_1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp35
  assign obj_subVec_1 = subVecD_1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp35
  assign obj_subVec_2 = Null_rsvd_1;



  assign tmp_18[0] = (obj_validReg1 == 1'b0 ? obj_subVec_2[0] :
              obj_subVec_1[0]);
  assign tmp_18[1] = (obj_validReg1 == 1'b0 ? obj_subVec_2[1] :
              obj_subVec_1[1]);



  always @(posedge clk or posedge reset)
    begin : obj_subVec_reg_process
      if (reset == 1'b1) begin
        obj_subVec_reg_reg[0] <= 1'b0;
        obj_subVec_reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_subVec_reg_reg[0] <= obj_subVec_reg_reg_next[0];
          obj_subVec_reg_reg[1] <= obj_subVec_reg_reg_next[1];
        end
      end
    end

  assign obj_subVec[0] = obj_subVec_reg_reg[0];
  assign obj_subVec[1] = obj_subVec_reg_reg[1];
  assign obj_subVec_reg_reg_next[0] = tmp_18[0];
  assign obj_subVec_reg_reg_next[1] = tmp_18[1];



  assign tmp_19 = obj_subVec[1];



  assign tmp_20 = obj_subVec[0];



  assign tmp_21 = obj_startReg2 && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp107
  assign tmp_22 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  assign tmp_23 = 4'b0000;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp160
  assign regInd1D = 4'b0000;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113_trueregionp1_falseregionp1
  assign obj_endFlag_1 = 1'b1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113_trueregionp1_trueregionp1
  assign obj_endFlag_2 = 1'b0;



  assign tmp_24 = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp82
  assign obj_endFlag_3 = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp142
  assign tmp_26 = tmp_25 + 4'b0001;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp150
  assign tmp_28 = tmp_27 + 4'b0001;



  assign tmp_30 = tmp_29 - 4'b0010;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp107_falseregionp1_trueregionp1_falseregionp1
  assign tmp_31 = tmp_29 > 4'b0001;



  assign tmp_32 = (tmp_31 == 1'b0 ? tmp_29 :
              tmp_30);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp107_falseregionp1_trueregionp1
  assign tmp_33 = (obj_endFlag_4 == 1'b0 ? tmp_32 :
              obj_regInd1);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp107_falseregionp1
  assign tmp_34 = obj_validReg2 || obj_endFlag_4;



  assign tmp_35 = (tmp_34 == 1'b0 ? obj_regInd1 :
              tmp_33);



  assign tmp_36 = (tmp_22 == 1'b0 ? tmp_35 :
              obj_regInd1);



  assign tmp_37 = (tmp == 1'b0 ? tmp_36 :
              tmp_23);



  assign tmp_38 = (tmp == 1'b0 ? tmp_37 :
              tmp_29);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp160
  always @(posedge clk or posedge reset)
    begin : obj_regInd1_reg_process
      if (reset == 1'b1) begin
        obj_regInd1 <= 4'b0000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_regInd1 <= tmp_38;
        end
      end
    end



  assign tmp_27 = (tmp_21 == 1'b0 ? obj_regInd1 :
              regInd1D);



  assign tmp_25 = (tmp_20 == 1'b0 ? tmp_27 :
              tmp_28);



  assign tmp_29 = (tmp_19 == 1'b0 ? tmp_25 :
              tmp_26);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113_trueregionp1
  assign tmp_39 = tmp_29 < 4'b0011;



  assign tmp_40 = (tmp_39 == 1'b0 ? obj_endFlag_1 :
              obj_endFlag_2);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp113_falseregionp1
  assign tmp_41 = obj_validReg2 || obj_endFlag_4;



  assign tmp_42 = (tmp_41 == 1'b0 ? obj_endFlag_4 :
              obj_endFlag);



  assign tmp_43 = (tmp_6 == 1'b0 ? tmp_42 :
              tmp_40);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp82
  assign tmp_44 = (tmp == 1'b0 ? tmp_43 :
              tmp_24);



  assign tmp_45 = (tmp == 1'b0 ? tmp_44 :
              obj_endFlag_3);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp121_falseregionp1_trueregionp1
  always @(posedge clk or posedge reset)
    begin : obj_endFlag_reg_process
      if (reset == 1'b1) begin
        obj_endFlag_4 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_endFlag_4 <= tmp_45;
        end
      end
    end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1
  assign tmp_46 = obj_validReg2 || obj_endFlag_4;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_falseregionp5
  assign tmp_47 = tmp_29 > 4'b0001;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_falseregionp5_falseregionp1
  assign validtemp = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_falseregionp5_trueregionp1
  assign validtemp_1 = 1'b1;



  assign tmp_48 = (tmp_47 == 1'b0 ? validtemp :
              validtemp_1);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_trueregionp5
  assign validtemp_2 = 1'b1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1
  assign tmp_49 = (obj_endFlag_4 == 1'b0 ? tmp_48 :
              validtemp_2);



  assign tmp_50 = tmp_49 && (obj_frameOn_2 || obj_endFlag_4);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_falseregionp1
  assign out = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119
  assign tmp_51 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_falseregionp1
  assign obj_validOut = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_falseregionp1_trueregionp1_trueregionp1
  assign out_1 = 1'b1;



  assign tmp_52 = (tmp_50 == 1'b0 ? out :
              out_1);



  assign tmp_53 = (tmp_46 == 1'b0 ? obj_validOut :
              tmp_52);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp119_trueregionp1
  assign NonZero = tmp_29 != 4'b0000;



  assign tmp_54 = (tmp_51 == 1'b0 ? tmp_53 :
              NonZero);



  assign tmp_55 = 1'b0;



  assign tmp_56 = (tmp == 1'b0 ? tmp_54 :
              tmp_55);



  assign tmp_57 = (tmp == 1'b0 ? tmp_56 :
              obj_endFlag_4);



  always @(posedge clk or posedge reset)
    begin : obj_validOut_reg_process
      if (reset == 1'b1) begin
        obj_validOut_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_validOut_1 <= tmp_57;
        end
      end
    end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp165
  assign varargout_1 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1
  assign tmp_58 = obj_validReg2 || obj_endFlag_4;



  assign dataOutD = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_falseregionp1
  assign dataOutD_1 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_falseregionp1
  assign tmp_59 = tmp_29 > 4'b0001;



  assign dataOutD_2 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_falseregionp1_falseregionp1
  assign dataOutD_3 = {2{1'b0}};



  assign tmp_60 = obj_subVec[1];



  assign tmp_61 = obj_subVec[0];



  assign tmp_62 = obj_startReg2 && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105
  assign tmp_63 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105_falseregionp1
  assign tmp_64 = obj_validReg2 || obj_endFlag_4;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105_falseregionp1_trueregionp1_falseregionp1
  assign tmp_65 = tmp_29 > 4'b0001;



  assign tmp_66 = {4{1'b0}};



  assign dataReg1D = {4{1'b0}};



  assign dataReg1D_1 = {4{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp156
  assign dataReg1D_2 = {4{1'b0}};



  assign reg_rsvd = {4{1'b0}};



  assign data[0] = data_0;
  assign data[1] = data_1;

  assign tmp_67 = data;



  assign obj_dataInBuf1_1 = tmp_67;



  always @(posedge clk or posedge reset)
    begin : obj_dataInBuf1_reg_process
      if (reset == 1'b1) begin
        obj_dataInBuf1_reg_reg[0] <= 1'b0;
        obj_dataInBuf1_reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataInBuf1_reg_reg[0] <= obj_dataInBuf1_reg_reg_next[0];
          obj_dataInBuf1_reg_reg[1] <= obj_dataInBuf1_reg_reg_next[1];
        end
      end
    end

  assign obj_dataInBuf1[0] = obj_dataInBuf1_reg_reg[0];
  assign obj_dataInBuf1[1] = obj_dataInBuf1_reg_reg[1];
  assign obj_dataInBuf1_reg_reg_next[0] = obj_dataInBuf1_1[0];
  assign obj_dataInBuf1_reg_reg_next[1] = obj_dataInBuf1_1[1];



  assign obj_dataInBuf2_1 = obj_dataInBuf1;



  always @(posedge clk or posedge reset)
    begin : obj_dataInBuf2_reg_process
      if (reset == 1'b1) begin
        obj_dataInBuf2_reg_reg[0] <= 1'b0;
        obj_dataInBuf2_reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataInBuf2_reg_reg[0] <= obj_dataInBuf2_reg_reg_next[0];
          obj_dataInBuf2_reg_reg[1] <= obj_dataInBuf2_reg_reg_next[1];
        end
      end
    end

  assign obj_dataInBuf2[0] = obj_dataInBuf2_reg_reg[0];
  assign obj_dataInBuf2[1] = obj_dataInBuf2_reg_reg[1];
  assign obj_dataInBuf2_reg_reg_next[0] = obj_dataInBuf2_1[0];
  assign obj_dataInBuf2_reg_reg_next[1] = obj_dataInBuf2_1[1];



  assign tmp_68 = obj_dataInBuf2[0];



  assign p154tmp_add_temp = tmp_27 + 4'b0001;
  assign p154tmp_1 = {28'b0, p154tmp_add_temp};
  assign tmp_69 = p154tmp_1 - 32'sd1;



  assign tmp_70 = obj_dataInBuf2[1];



  assign p145tmp_add_temp = tmp_25 + 4'b0001;
  assign p145tmp_1 = {28'b0, p145tmp_add_temp};
  assign tmp_71 = p145tmp_1 - 32'sd1;



  always @(posedge clk or posedge reset)
    begin : obj_dataReg2_reg_process
      if (reset == 1'b1) begin
        obj_dataReg2_reg_reg[0] <= 1'b0;
        obj_dataReg2_reg_reg[1] <= 1'b0;
        obj_dataReg2_reg_reg[2] <= 1'b0;
        obj_dataReg2_reg_reg[3] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataReg2_reg_reg[0] <= obj_dataReg2_reg_reg_next[0];
          obj_dataReg2_reg_reg[1] <= obj_dataReg2_reg_reg_next[1];
          obj_dataReg2_reg_reg[2] <= obj_dataReg2_reg_reg_next[2];
          obj_dataReg2_reg_reg[3] <= obj_dataReg2_reg_reg_next[3];
        end
      end
    end

  assign obj_dataReg2_2[0] = obj_dataReg2_reg_reg[0];
  assign obj_dataReg2_2[1] = obj_dataReg2_reg_reg[1];
  assign obj_dataReg2_2[2] = obj_dataReg2_reg_reg[2];
  assign obj_dataReg2_2[3] = obj_dataReg2_reg_reg[3];
  assign obj_dataReg2_reg_reg_next[0] = obj_dataReg2_1[0];
  assign obj_dataReg2_reg_reg_next[1] = obj_dataReg2_1[1];
  assign obj_dataReg2_reg_reg_next[2] = obj_dataReg2_1[2];
  assign obj_dataReg2_reg_reg_next[3] = obj_dataReg2_1[3];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp138
  always @* begin
    reg_rsvd_1 = tmp_72;
    reg_rsvd_1[tmp_71] = tmp_70;
  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp147
  always @* begin
    reg_rsvd_3 = reg_rsvd_2;
    reg_rsvd_3[tmp_69] = tmp_68;
  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp75
  assign obj_dataReg1_1 = obj_dataReg2_1;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105_falseregionp1_trueregionp1_falseregionp1_trueregionp1
  always @* begin
    obj_dataReg1_2 = obj_dataReg1;
    obj_dataReg1_2[32'sd0:32'sd1] = obj_dataReg2_1[32'sd2:32'sd3];
  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105_falseregionp1_trueregionp1_falseregionp1_falseregionp1
  assign obj_dataReg1_3 = obj_dataReg2_1;



  assign tmp_74[0] = (tmp_65 == 1'b0 ? obj_dataReg1_3[0] :
              obj_dataReg1_2[0]);
  assign tmp_74[1] = (tmp_65 == 1'b0 ? obj_dataReg1_3[1] :
              obj_dataReg1_2[1]);
  assign tmp_74[2] = (tmp_65 == 1'b0 ? obj_dataReg1_3[2] :
              obj_dataReg1_2[2]);
  assign tmp_74[3] = (tmp_65 == 1'b0 ? obj_dataReg1_3[3] :
              obj_dataReg1_2[3]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp105_falseregionp1_trueregionp1
  assign tmp_75[0] = (obj_endFlag_4 == 1'b0 ? tmp_74[0] :
              obj_dataReg1[0]);
  assign tmp_75[1] = (obj_endFlag_4 == 1'b0 ? tmp_74[1] :
              obj_dataReg1[1]);
  assign tmp_75[2] = (obj_endFlag_4 == 1'b0 ? tmp_74[2] :
              obj_dataReg1[2]);
  assign tmp_75[3] = (obj_endFlag_4 == 1'b0 ? tmp_74[3] :
              obj_dataReg1[3]);



  assign tmp_76[0] = (tmp_64 == 1'b0 ? obj_dataReg1[0] :
              tmp_75[0]);
  assign tmp_76[1] = (tmp_64 == 1'b0 ? obj_dataReg1[1] :
              tmp_75[1]);
  assign tmp_76[2] = (tmp_64 == 1'b0 ? obj_dataReg1[2] :
              tmp_75[2]);
  assign tmp_76[3] = (tmp_64 == 1'b0 ? obj_dataReg1[3] :
              tmp_75[3]);



  assign tmp_77[0] = (tmp_63 == 1'b0 ? tmp_76[0] :
              obj_dataReg1[0]);
  assign tmp_77[1] = (tmp_63 == 1'b0 ? tmp_76[1] :
              obj_dataReg1[1]);
  assign tmp_77[2] = (tmp_63 == 1'b0 ? tmp_76[2] :
              obj_dataReg1[2]);
  assign tmp_77[3] = (tmp_63 == 1'b0 ? tmp_76[3] :
              obj_dataReg1[3]);



  assign tmp_73[0] = (tmp == 1'b0 ? tmp_77[0] :
              tmp_66[0]);
  assign tmp_73[1] = (tmp == 1'b0 ? tmp_77[1] :
              tmp_66[1]);
  assign tmp_73[2] = (tmp == 1'b0 ? tmp_77[2] :
              tmp_66[2]);
  assign tmp_73[3] = (tmp == 1'b0 ? tmp_77[3] :
              tmp_66[3]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp75
  assign obj_dataReg1_4[0] = tmp_73[0];
  assign obj_dataReg1_4[1] = tmp_73[1];
  assign obj_dataReg1_4[2] = tmp_73[2];
  assign obj_dataReg1_4[3] = tmp_73[3];

  assign tmp_78[0] = (tmp == 1'b0 ? obj_dataReg1_4[0] :
              obj_dataReg1_1[0]);
  assign tmp_78[1] = (tmp == 1'b0 ? obj_dataReg1_4[1] :
              obj_dataReg1_1[1]);
  assign tmp_78[2] = (tmp == 1'b0 ? obj_dataReg1_4[2] :
              obj_dataReg1_1[2]);
  assign tmp_78[3] = (tmp == 1'b0 ? obj_dataReg1_4[3] :
              obj_dataReg1_1[3]);



  always @(posedge clk or posedge reset)
    begin : obj_dataReg1_reg_process
      if (reset == 1'b1) begin
        obj_dataReg1_reg_reg[0] <= 1'b0;
        obj_dataReg1_reg_reg[1] <= 1'b0;
        obj_dataReg1_reg_reg[2] <= 1'b0;
        obj_dataReg1_reg_reg[3] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataReg1_reg_reg[0] <= obj_dataReg1_reg_reg_next[0];
          obj_dataReg1_reg_reg[1] <= obj_dataReg1_reg_reg_next[1];
          obj_dataReg1_reg_reg[2] <= obj_dataReg1_reg_reg_next[2];
          obj_dataReg1_reg_reg[3] <= obj_dataReg1_reg_reg_next[3];
        end
      end
    end

  assign obj_dataReg1[0] = obj_dataReg1_reg_reg[0];
  assign obj_dataReg1[1] = obj_dataReg1_reg_reg[1];
  assign obj_dataReg1[2] = obj_dataReg1_reg_reg[2];
  assign obj_dataReg1[3] = obj_dataReg1_reg_reg[3];
  assign obj_dataReg1_reg_reg_next[0] = tmp_78[0];
  assign obj_dataReg1_reg_reg_next[1] = tmp_78[1];
  assign obj_dataReg1_reg_reg_next[2] = tmp_78[2];
  assign obj_dataReg1_reg_reg_next[3] = tmp_78[3];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp156
  assign dataReg1D_3 = obj_dataReg1;



  assign tmp_79[0] = (tmp_62 == 1'b0 ? dataReg1D_3[0] :
              dataReg1D_2[0]);
  assign tmp_79[1] = (tmp_62 == 1'b0 ? dataReg1D_3[1] :
              dataReg1D_2[1]);
  assign tmp_79[2] = (tmp_62 == 1'b0 ? dataReg1D_3[2] :
              dataReg1D_2[2]);
  assign tmp_79[3] = (tmp_62 == 1'b0 ? dataReg1D_3[3] :
              dataReg1D_2[3]);



  assign reg_rsvd_2 = tmp_79;



  assign tmp_72[0] = (tmp_61 == 1'b0 ? reg_rsvd_2[0] :
              reg_rsvd_3[0]);
  assign tmp_72[1] = (tmp_61 == 1'b0 ? reg_rsvd_2[1] :
              reg_rsvd_3[1]);
  assign tmp_72[2] = (tmp_61 == 1'b0 ? reg_rsvd_2[2] :
              reg_rsvd_3[2]);
  assign tmp_72[3] = (tmp_61 == 1'b0 ? reg_rsvd_2[3] :
              reg_rsvd_3[3]);



  assign tmp_80[0] = (tmp_60 == 1'b0 ? tmp_72[0] :
              reg_rsvd_1[0]);
  assign tmp_80[1] = (tmp_60 == 1'b0 ? tmp_72[1] :
              reg_rsvd_1[1]);
  assign tmp_80[2] = (tmp_60 == 1'b0 ? tmp_72[2] :
              reg_rsvd_1[2]);
  assign tmp_80[3] = (tmp_60 == 1'b0 ? tmp_72[3] :
              reg_rsvd_1[3]);



  assign obj_dataReg2 = tmp_80;



  assign obj_dataReg2_1[0] = obj_dataReg2[0];
  assign obj_dataReg2_1[1] = obj_dataReg2[1];
  assign obj_dataReg2_1[2] = obj_dataReg2[2];
  assign obj_dataReg2_1[3] = obj_dataReg2[3];

  assign dataOutD_4 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_falseregionp1_trueregionp1
  assign dataOutD_5[32'sd0:32'sd1] = obj_dataReg2_1[32'sd0:32'sd1];



  assign tmp_81[0] = (tmp_59 == 1'b0 ? dataOutD_3[0] :
              dataOutD_5[0]);
  assign tmp_81[1] = (tmp_59 == 1'b0 ? dataOutD_3[1] :
              dataOutD_5[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp115
  assign tmp_82 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp115_trueregionp1
  assign tmp_83 = tmp_29 < 4'b0011;



  assign tmp_84 = tmp_29 - 4'b0010;



  assign tmp_85 = (tmp_83 == 1'b0 ? tmp_84 :
              tmp_29);



  assign tmp_86 = 4'b0000;



  assign tmp_87 = (tmp_82 == 1'b0 ? obj_regInd3 :
              tmp_85);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp79
  assign tmp_88 = (tmp == 1'b0 ? tmp_87 :
              tmp_86);



  assign tmp_89 = (tmp == 1'b0 ? tmp_88 :
              obj_regInd3);



  always @(posedge clk or posedge reset)
    begin : obj_regInd3_reg_process
      if (reset == 1'b1) begin
        obj_regInd3 <= 4'b0000;
      end
      else begin
        if (enb_1_2_0) begin
          obj_regInd3 <= tmp_89;
        end
      end
    end



  assign tmp_90 = obj_regInd3 == 4'b0010;



  assign tmp_91 = obj_regInd3 == 4'b0001;



  assign tempData = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_trueregionp1
  assign tempData_1 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp109
  assign tmp_92 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp109_trueregionp1
  assign tmp_93 = tmp_29 < 4'b0011;



  assign tmp_94 = {4{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp109_trueregionp1_trueregionp1
  assign obj_dataReg3_1 = {4{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp109_trueregionp1_falseregionp1
  always @* begin
    obj_dataReg3_2 = obj_dataReg3;
    obj_dataReg3_2[32'sd0:32'sd1] = obj_dataReg2_1[32'sd2:32'sd3];
  end



  assign tmp_96[0] = (tmp_93 == 1'b0 ? obj_dataReg3_2[0] :
              obj_dataReg3_1[0]);
  assign tmp_96[1] = (tmp_93 == 1'b0 ? obj_dataReg3_2[1] :
              obj_dataReg3_1[1]);
  assign tmp_96[2] = (tmp_93 == 1'b0 ? obj_dataReg3_2[2] :
              obj_dataReg3_1[2]);
  assign tmp_96[3] = (tmp_93 == 1'b0 ? obj_dataReg3_2[3] :
              obj_dataReg3_1[3]);



  assign tmp_97[0] = (tmp_92 == 1'b0 ? obj_dataReg3[0] :
              tmp_96[0]);
  assign tmp_97[1] = (tmp_92 == 1'b0 ? obj_dataReg3[1] :
              tmp_96[1]);
  assign tmp_97[2] = (tmp_92 == 1'b0 ? obj_dataReg3[2] :
              tmp_96[2]);
  assign tmp_97[3] = (tmp_92 == 1'b0 ? obj_dataReg3[3] :
              tmp_96[3]);



  assign tmp_95[0] = (tmp == 1'b0 ? tmp_97[0] :
              tmp_94[0]);
  assign tmp_95[1] = (tmp == 1'b0 ? tmp_97[1] :
              tmp_94[1]);
  assign tmp_95[2] = (tmp == 1'b0 ? tmp_97[2] :
              tmp_94[2]);
  assign tmp_95[3] = (tmp == 1'b0 ? tmp_97[3] :
              tmp_94[3]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp71
  assign obj_dataReg3_3[0] = tmp_95[0];
  assign obj_dataReg3_3[1] = tmp_95[1];
  assign obj_dataReg3_3[2] = tmp_95[2];
  assign obj_dataReg3_3[3] = tmp_95[3];

  assign tmp_98[0] = (tmp == 1'b0 ? obj_dataReg3_3[0] :
              obj_dataReg3[0]);
  assign tmp_98[1] = (tmp == 1'b0 ? obj_dataReg3_3[1] :
              obj_dataReg3[1]);
  assign tmp_98[2] = (tmp == 1'b0 ? obj_dataReg3_3[2] :
              obj_dataReg3[2]);
  assign tmp_98[3] = (tmp == 1'b0 ? obj_dataReg3_3[3] :
              obj_dataReg3[3]);



  always @(posedge clk or posedge reset)
    begin : obj_dataReg3_reg_process
      if (reset == 1'b1) begin
        obj_dataReg3_reg_reg[0] <= 1'b0;
        obj_dataReg3_reg_reg[1] <= 1'b0;
        obj_dataReg3_reg_reg[2] <= 1'b0;
        obj_dataReg3_reg_reg[3] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataReg3_reg_reg[0] <= obj_dataReg3_reg_reg_next[0];
          obj_dataReg3_reg_reg[1] <= obj_dataReg3_reg_reg_next[1];
          obj_dataReg3_reg_reg[2] <= obj_dataReg3_reg_reg_next[2];
          obj_dataReg3_reg_reg[3] <= obj_dataReg3_reg_reg_next[3];
        end
      end
    end

  assign obj_dataReg3[0] = obj_dataReg3_reg_reg[0];
  assign obj_dataReg3[1] = obj_dataReg3_reg_reg[1];
  assign obj_dataReg3[2] = obj_dataReg3_reg_reg[2];
  assign obj_dataReg3[3] = obj_dataReg3_reg_reg[3];
  assign obj_dataReg3_reg_reg_next[0] = tmp_98[0];
  assign obj_dataReg3_reg_reg_next[1] = tmp_98[1];
  assign obj_dataReg3_reg_reg_next[2] = tmp_98[2];
  assign obj_dataReg3_reg_reg_next[3] = tmp_98[3];



  assign tmp_99 = obj_dataReg3[0];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_trueregionp1_trueregionp5
  always @* begin
    tempData_2 = tempData_1;
    tempData_2[0] = tmp_99;
  end



  assign tmp_100[0] = (tmp_91 == 1'b0 ? tempData_1[0] :
              tempData_2[0]);
  assign tmp_100[1] = (tmp_91 == 1'b0 ? tempData_1[1] :
              tempData_2[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1_trueregionp1_trueregionp2
  assign tempData_3[32'sd0:32'sd1] = obj_dataReg3[32'sd0:32'sd1];



  assign tmp_101[0] = (tmp_90 == 1'b0 ? tmp_100[0] :
              tempData_3[0]);
  assign tmp_101[1] = (tmp_90 == 1'b0 ? tmp_100[1] :
              tempData_3[1]);



  assign dataOutD_6 = {2{1'b0}};



  assign dataOutD_7 = tmp_101;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_trueregionp1
  assign tmp_102 = tmp_29 < 4'b0011;



  assign dataOutD_8 = {2{1'b0}};



  assign tmp_103 = tmp_29 == 4'b0010;



  assign tmp_104 = tmp_29 == 4'b0001;



  assign tempData_4 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_trueregionp1_trueregionp1
  assign tempData_5 = {2{1'b0}};



  assign tmp_105 = obj_dataReg2_1[0];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_trueregionp1_trueregionp1_trueregionp5
  always @* begin
    tempData_6 = tempData_5;
    tempData_6[0] = tmp_105;
  end



  assign tmp_106[0] = (tmp_104 == 1'b0 ? tempData_5[0] :
              tempData_6[0]);
  assign tmp_106[1] = (tmp_104 == 1'b0 ? tempData_5[1] :
              tempData_6[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_trueregionp1_trueregionp1_trueregionp2
  assign tempData_7[32'sd0:32'sd1] = obj_dataReg2_1[32'sd0:32'sd1];



  assign tmp_107[0] = (tmp_103 == 1'b0 ? tmp_106[0] :
              tempData_7[0]);
  assign tmp_107[1] = (tmp_103 == 1'b0 ? tmp_106[1] :
              tempData_7[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111
  assign tmp_108 = (obj_endReg2 && obj_frameOn_2) && obj_validReg2;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_falseregionp1_trueregionp1
  assign tmp_109[0] = (obj_endFlag_4 == 1'b0 ? tmp_81[0] :
              dataOutD_7[0]);
  assign tmp_109[1] = (obj_endFlag_4 == 1'b0 ? tmp_81[1] :
              dataOutD_7[1]);



  assign tmp_110[0] = (tmp_58 == 1'b0 ? dataOutD_1[0] :
              tmp_109[0]);
  assign tmp_110[1] = (tmp_58 == 1'b0 ? dataOutD_1[1] :
              tmp_109[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp111_trueregionp1_falseregionp1
  assign dataOutD_9[32'sd0:32'sd1] = obj_dataReg2_1[32'sd0:32'sd1];



  assign dataOutD_10 = {2{1'b0}};



  assign dataOutD_11 = tmp_107;



  assign tmp_111[0] = (tmp_102 == 1'b0 ? dataOutD_9[0] :
              dataOutD_11[0]);
  assign tmp_111[1] = (tmp_102 == 1'b0 ? dataOutD_9[1] :
              dataOutD_11[1]);



  assign tmp_112[0] = (tmp_108 == 1'b0 ? tmp_110[0] :
              tmp_111[0]);
  assign tmp_112[1] = (tmp_108 == 1'b0 ? tmp_110[1] :
              tmp_111[1]);



  assign tmp_113 = {2{1'b0}};



  assign tmp_114[0] = (tmp == 1'b0 ? tmp_112[0] :
              tmp_113[0]);
  assign tmp_114[1] = (tmp == 1'b0 ? tmp_112[1] :
              tmp_113[1]);



  assign tmp_115 = {2{1'b0}};



  assign dataOutD_12 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp103_falseregionp1
  assign dataOutD_13 = {2{1'b0}};



  assign tmp_116 = obj_regInd3 == 4'b0010;



  assign tmp_117 = obj_regInd3 == 4'b0001;



  assign tempData_8 = {2{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp103_trueregionp1
  assign tempData_9 = {2{1'b0}};



  assign tmp_118 = obj_dataReg3[0];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp103_trueregionp1_trueregionp5
  always @* begin
    tempData_10 = tempData_9;
    tempData_10[0] = tmp_118;
  end



  assign tmp_119[0] = (tmp_117 == 1'b0 ? tempData_9[0] :
              tempData_10[0]);
  assign tmp_119[1] = (tmp_117 == 1'b0 ? tempData_9[1] :
              tempData_10[1]);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp103_trueregionp1_trueregionp2
  assign tempData_11[32'sd0:32'sd1] = obj_dataReg3[32'sd0:32'sd1];



  assign tmp_120[0] = (tmp_116 == 1'b0 ? tmp_119[0] :
              tempData_11[0]);
  assign tmp_120[1] = (tmp_116 == 1'b0 ? tmp_119[1] :
              tempData_11[1]);



  assign dataOutD_14 = {2{1'b0}};



  assign dataOutD_15 = tmp_120;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp103
  assign tmp_121[0] = (obj_endFlag_4 == 1'b0 ? dataOutD_13[0] :
              dataOutD_15[0]);
  assign tmp_121[1] = (obj_endFlag_4 == 1'b0 ? dataOutD_13[1] :
              dataOutD_15[1]);



  assign tmp_122[0] = (tmp == 1'b0 ? tmp_115[0] :
              tmp_121[0]);
  assign tmp_122[1] = (tmp == 1'b0 ? tmp_115[1] :
              tmp_121[1]);



  assign tmp_123[0] = (tmp == 1'b0 ? tmp_114[0] :
              tmp_122[0]);
  assign tmp_123[1] = (tmp == 1'b0 ? tmp_114[1] :
              tmp_122[1]);



  assign obj_dataOut_1 = tmp_123;



  always @(posedge clk or posedge reset)
    begin : obj_dataOut_reg_process
      if (reset == 1'b1) begin
        obj_dataOut_reg_reg[0] <= 1'b0;
        obj_dataOut_reg_reg[1] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          obj_dataOut_reg_reg[0] <= obj_dataOut_reg_reg_next[0];
          obj_dataOut_reg_reg[1] <= obj_dataOut_reg_reg_next[1];
        end
      end
    end

  assign obj_dataOut[0] = obj_dataOut_reg_reg[0];
  assign obj_dataOut[1] = obj_dataOut_reg_reg[1];
  assign obj_dataOut_reg_reg_next[0] = obj_dataOut_1[0];
  assign obj_dataOut_reg_reg_next[1] = obj_dataOut_1[1];



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp165
  assign varargout_1_1 = obj_dataOut;



  assign tmp_124[0] = (obj_validOut_1 == 1'b0 ? varargout_1[0] :
              varargout_1_1[0]);
  assign tmp_124[1] = (obj_validOut_1 == 1'b0 ? varargout_1[1] :
              varargout_1_1[1]);



  assign varargout_1_2 = tmp_124;



  // HDL code generation from MATLAB function: cgircomp_kernel
  assign data_2 = varargout_1_2;



  assign data1_0 = data_2[0];

  assign data1_1 = data_2[1];

  assign ctrl1_valid = obj_validOut_1;

endmodule  // whdlOFDMTx_Puncturer

