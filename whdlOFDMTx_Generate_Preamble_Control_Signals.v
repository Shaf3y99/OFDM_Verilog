// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Generate_Preamble_Control_Signals.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Generate_Preamble_Control_Signals
// Source Path: whdlOFDMTx/Frame Generator/Generate Preamble Control Signals
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Generate_Preamble_Control_Signals
          (clk,
           reset,
           enb_1_2_0,
           preambleSet,
           ss_set,
           rs_set,
           pilot_set);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   preambleSet;
  output  ss_set;
  output  rs_set;
  output  pilot_set;


  wire [9:0] count_step;  // ufix10
  wire [9:0] count_from;  // ufix10
  reg [9:0] HDL_Counter_out1;  // ufix10
  wire [9:0] count;  // ufix10
  wire need_to_wrap;
  wire [9:0] count_value;  // ufix10
  wire [9:0] count_1;  // ufix10
  wire Compare_To_Constant_out1;
  wire Logical_Operator2_out1;
  wire Compare_To_Constant1_out1;
  wire Compare_To_Constant2_out1;
  wire Logical_Operator_out1;
  wire Logical_Operator3_out1;
  wire Compare_To_Constant3_out1;
  wire Compare_To_Constant4_out1;
  wire Logical_Operator1_out1;
  wire Logical_Operator4_out1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 600
  assign count_step = 10'b0000000001;



  assign count_from = 10'b0000000000;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 10'b1001011000;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (preambleSet == 1'b0 ? HDL_Counter_out1 :
              count_value);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 10'b0000000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  assign Compare_To_Constant_out1 = HDL_Counter_out1 < 10'b0001001000;



  assign Logical_Operator2_out1 = Compare_To_Constant_out1 & preambleSet;



  assign ss_set = Logical_Operator2_out1;

  assign Compare_To_Constant1_out1 = HDL_Counter_out1 >= 10'b0001001000;



  assign Compare_To_Constant2_out1 = HDL_Counter_out1 < 10'b0011011000;



  assign Logical_Operator_out1 = Compare_To_Constant1_out1 & Compare_To_Constant2_out1;



  assign Logical_Operator3_out1 = Logical_Operator_out1 & preambleSet;



  assign rs_set = Logical_Operator3_out1;

  assign Compare_To_Constant3_out1 = HDL_Counter_out1 >= 10'b0011011000;



  assign Compare_To_Constant4_out1 = HDL_Counter_out1 < 10'b1001011000;



  assign Logical_Operator1_out1 = Compare_To_Constant3_out1 & Compare_To_Constant4_out1;



  assign Logical_Operator4_out1 = Logical_Operator1_out1 & preambleSet;



  assign pilot_set = Logical_Operator4_out1;

endmodule  // whdlOFDMTx_Generate_Preamble_Control_Signals

