// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_CRCGenCompute.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_CRCGenCompute
// Source Path: whdlOFDMTx/Frame Generator/Data/Data Chain/General CRC Generator HDL Optimized/CRCGenCompute
// Hierarchy Level: 6
// 
// Compute the CRC CheckSum
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_CRCGenCompute
          (clk,
           reset,
           enb_1_2_0,
           datainReg,
           validIn,
           processMsg,
           padZero,
           counter,
           crcChecksum_0,
           crcChecksum_1,
           crcChecksum_2,
           crcChecksum_3,
           crcChecksum_4,
           crcChecksum_5,
           crcChecksum_6,
           crcChecksum_7,
           crcChecksum_8,
           crcChecksum_9,
           crcChecksum_10,
           crcChecksum_11,
           crcChecksum_12,
           crcChecksum_13,
           crcChecksum_14,
           crcChecksum_15,
           crcChecksum_16,
           crcChecksum_17,
           crcChecksum_18,
           crcChecksum_19,
           crcChecksum_20,
           crcChecksum_21,
           crcChecksum_22,
           crcChecksum_23,
           crcChecksum_24,
           crcChecksum_25,
           crcChecksum_26,
           crcChecksum_27,
           crcChecksum_28,
           crcChecksum_29,
           crcChecksum_30,
           crcChecksum_31);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   datainReg;  // ufix1
  input   validIn;  // ufix1
  input   processMsg;  // ufix1
  input   padZero;  // ufix1
  input   [4:0] counter;  // ufix5
  output  crcChecksum_0;  // ufix1
  output  crcChecksum_1;  // ufix1
  output  crcChecksum_2;  // ufix1
  output  crcChecksum_3;  // ufix1
  output  crcChecksum_4;  // ufix1
  output  crcChecksum_5;  // ufix1
  output  crcChecksum_6;  // ufix1
  output  crcChecksum_7;  // ufix1
  output  crcChecksum_8;  // ufix1
  output  crcChecksum_9;  // ufix1
  output  crcChecksum_10;  // ufix1
  output  crcChecksum_11;  // ufix1
  output  crcChecksum_12;  // ufix1
  output  crcChecksum_13;  // ufix1
  output  crcChecksum_14;  // ufix1
  output  crcChecksum_15;  // ufix1
  output  crcChecksum_16;  // ufix1
  output  crcChecksum_17;  // ufix1
  output  crcChecksum_18;  // ufix1
  output  crcChecksum_19;  // ufix1
  output  crcChecksum_20;  // ufix1
  output  crcChecksum_21;  // ufix1
  output  crcChecksum_22;  // ufix1
  output  crcChecksum_23;  // ufix1
  output  crcChecksum_24;  // ufix1
  output  crcChecksum_25;  // ufix1
  output  crcChecksum_26;  // ufix1
  output  crcChecksum_27;  // ufix1
  output  crcChecksum_28;  // ufix1
  output  crcChecksum_29;  // ufix1
  output  crcChecksum_30;  // ufix1
  output  crcChecksum_31;  // ufix1


  wire xoredSel;  // ufix1
  reg  dvalidin;  // ufix1
  wire tcsSel;  // ufix1
  wire csSel;  // ufix1
  wire rpadZero;  // ufix1
  wire dataSel;  // ufix1
  wire [0:31] padingzeros;  // ufix1 [32]
  wire [0:30] inputzeros;  // ufix1 [31]
  wire [0:31] datamux;  // ufix1 [32]
  wire [0:31] datacpt;  // ufix1 [32]
  wire datacpt_31;  // ufix1
  wire datacpt_30;  // ufix1
  wire datacpt_29;  // ufix1
  wire datacpt_28;  // ufix1
  wire datacpt_27;  // ufix1
  wire datacpt_26;  // ufix1
  wire datacpt_25;  // ufix1
  wire datacpt_24;  // ufix1
  wire datacpt_23;  // ufix1
  wire datacpt_22;  // ufix1
  wire datacpt_21;  // ufix1
  wire datacpt_20;  // ufix1
  wire datacpt_19;  // ufix1
  wire datacpt_18;  // ufix1
  wire datacpt_17;  // ufix1
  wire datacpt_16;  // ufix1
  wire datacpt_15;  // ufix1
  wire datacpt_14;  // ufix1
  wire datacpt_13;  // ufix1
  wire datacpt_12;  // ufix1
  wire datacpt_11;  // ufix1
  wire datacpt_10;  // ufix1
  wire datacpt_9;  // ufix1
  wire datacpt_8;  // ufix1
  wire datacpt_7;  // ufix1
  wire datacpt_6;  // ufix1
  wire datacpt_5;  // ufix1
  wire datacpt_4;  // ufix1
  wire datacpt_3;  // ufix1
  wire datacpt_2;  // ufix1
  wire datacpt_1;  // ufix1
  wire datacpt_0;  // ufix1
  wire [0:31] finalXorValue;  // ufix1 [32]
  wire finalXorValue_0;  // ufix1
  wire finalXorValue_1;  // ufix1
  wire finalXorValue_2;  // ufix1
  wire finalXorValue_3;  // ufix1
  wire finalXorValue_4;  // ufix1
  wire finalXorValue_5;  // ufix1
  wire finalXorValue_6;  // ufix1
  wire finalXorValue_7;  // ufix1
  wire finalXorValue_8;  // ufix1
  wire finalXorValue_9;  // ufix1
  wire finalXorValue_10;  // ufix1
  wire finalXorValue_11;  // ufix1
  wire finalXorValue_12;  // ufix1
  wire finalXorValue_13;  // ufix1
  wire finalXorValue_14;  // ufix1
  wire finalXorValue_15;  // ufix1
  wire finalXorValue_16;  // ufix1
  wire finalXorValue_17;  // ufix1
  wire finalXorValue_18;  // ufix1
  wire finalXorValue_19;  // ufix1
  wire finalXorValue_20;  // ufix1
  wire finalXorValue_21;  // ufix1
  wire finalXorValue_22;  // ufix1
  wire finalXorValue_23;  // ufix1
  wire finalXorValue_24;  // ufix1
  wire finalXorValue_25;  // ufix1
  wire finalXorValue_26;  // ufix1
  wire finalXorValue_27;  // ufix1
  wire finalXorValue_28;  // ufix1
  wire finalXorValue_29;  // ufix1
  wire finalXorValue_30;  // ufix1
  wire finalXorValue_31;  // ufix1
  wire [0:31] newChecksum;  // ufix1 [32]
  wire newChecksum_0;  // ufix1
  wire refelctCheckSum_31;  // ufix1
  wire newChecksum_1;  // ufix1
  wire refelctCheckSum_30;  // ufix1
  wire newChecksum_2;  // ufix1
  wire refelctCheckSum_29;  // ufix1
  wire newChecksum_3;  // ufix1
  wire refelctCheckSum_28;  // ufix1
  wire newChecksum_4;  // ufix1
  wire refelctCheckSum_27;  // ufix1
  wire newChecksum_5;  // ufix1
  wire refelctCheckSum_26;  // ufix1
  wire newChecksum_6;  // ufix1
  wire refelctCheckSum_25;  // ufix1
  wire newChecksum_7;  // ufix1
  wire refelctCheckSum_24;  // ufix1
  wire newChecksum_8;  // ufix1
  wire refelctCheckSum_23;  // ufix1
  wire newChecksum_9;  // ufix1
  wire refelctCheckSum_22;  // ufix1
  wire newChecksum_10;  // ufix1
  wire refelctCheckSum_21;  // ufix1
  wire newChecksum_11;  // ufix1
  wire refelctCheckSum_20;  // ufix1
  wire newChecksum_12;  // ufix1
  wire refelctCheckSum_19;  // ufix1
  wire newChecksum_13;  // ufix1
  wire refelctCheckSum_18;  // ufix1
  wire newChecksum_14;  // ufix1
  wire refelctCheckSum_17;  // ufix1
  wire newChecksum_15;  // ufix1
  wire refelctCheckSum_16;  // ufix1
  wire newChecksum_16;  // ufix1
  wire refelctCheckSum_15;  // ufix1
  wire newChecksum_17;  // ufix1
  wire refelctCheckSum_14;  // ufix1
  wire newChecksum_18;  // ufix1
  wire refelctCheckSum_13;  // ufix1
  wire newChecksum_19;  // ufix1
  wire refelctCheckSum_12;  // ufix1
  wire newChecksum_20;  // ufix1
  wire refelctCheckSum_11;  // ufix1
  wire newChecksum_21;  // ufix1
  wire refelctCheckSum_10;  // ufix1
  wire newChecksum_22;  // ufix1
  wire refelctCheckSum_9;  // ufix1
  wire newChecksum_23;  // ufix1
  wire refelctCheckSum_8;  // ufix1
  wire newChecksum_24;  // ufix1
  wire refelctCheckSum_7;  // ufix1
  wire newChecksum_25;  // ufix1
  wire refelctCheckSum_6;  // ufix1
  wire newChecksum_26;  // ufix1
  wire refelctCheckSum_5;  // ufix1
  wire newChecksum_27;  // ufix1
  wire refelctCheckSum_4;  // ufix1
  wire newChecksum_28;  // ufix1
  wire refelctCheckSum_3;  // ufix1
  wire newChecksum_29;  // ufix1
  wire refelctCheckSum_2;  // ufix1
  wire newChecksum_30;  // ufix1
  wire refelctCheckSum_1;  // ufix1
  wire newChecksum_31;  // ufix1
  wire refelctCheckSum_0;  // ufix1
  wire [0:31] xoredChecksum;  // ufix1 [32]
  reg  [0:31] checksumReg;  // ufix1 [32]
  wire checksumReg_30;  // ufix1
  wire tcs_entry31;  // ufix1
  wire checksumReg_29;  // ufix1
  wire tcs_entry30;  // ufix1
  wire checksumReg_28;  // ufix1
  wire tcs_entry29;  // ufix1
  wire checksumReg_27;  // ufix1
  wire tcs_entry28;  // ufix1
  wire checksumReg_26;  // ufix1
  wire tcs_entry27;  // ufix1
  wire checksumReg_25;  // ufix1
  wire checksumReg_31;  // ufix1
  wire tcs_entry26;  // ufix1
  wire checksumReg_24;  // ufix1
  wire tcs_entry25;  // ufix1
  wire checksumReg_23;  // ufix1
  wire tcs_entry24;  // ufix1
  wire checksumReg_22;  // ufix1
  wire tcs_entry23;  // ufix1
  wire checksumReg_21;  // ufix1
  wire tcs_entry22;  // ufix1
  wire checksumReg_20;  // ufix1
  wire tcs_entry21;  // ufix1
  wire checksumReg_19;  // ufix1
  wire tcs_entry20;  // ufix1
  wire checksumReg_18;  // ufix1
  wire tcs_entry19;  // ufix1
  wire checksumReg_17;  // ufix1
  wire tcs_entry18;  // ufix1
  wire checksumReg_16;  // ufix1
  wire tcs_entry17;  // ufix1
  wire checksumReg_15;  // ufix1
  wire tcs_entry16;  // ufix1
  wire checksumReg_14;  // ufix1
  wire tcs_entry15;  // ufix1
  wire checksumReg_13;  // ufix1
  wire tcs_entry14;  // ufix1
  wire checksumReg_12;  // ufix1
  wire tcs_entry13;  // ufix1
  wire checksumReg_11;  // ufix1
  wire tcs_entry12;  // ufix1
  wire checksumReg_10;  // ufix1
  wire tcs_entry11;  // ufix1
  wire checksumReg_9;  // ufix1
  wire tcs_entry10;  // ufix1
  wire checksumReg_8;  // ufix1
  wire tcs_entry9;  // ufix1
  wire checksumReg_7;  // ufix1
  wire tcs_entry8;  // ufix1
  wire checksumReg_6;  // ufix1
  wire tcs_entry7;  // ufix1
  wire checksumReg_5;  // ufix1
  wire tcs_entry6;  // ufix1
  wire checksumReg_4;  // ufix1
  wire tcs_entry5;  // ufix1
  wire checksumReg_3;  // ufix1
  wire tcs_entry4;  // ufix1
  wire checksumReg_2;  // ufix1
  wire tcs_entry3;  // ufix1
  wire checksumReg_1;  // ufix1
  wire tcs_entry2;  // ufix1
  wire checksumReg_0;  // ufix1
  wire tcs_entry1;  // ufix1
  wire tcs_entry0;  // ufix1
  wire [0:31] tchecksum;  // ufix1 [32]
  wire [0:31] finalChecksum;  // ufix1 [32]
  reg  [0:31] crcChecksum;  // ufix1 [32]


  assign xoredSel = counter == 5'b11111;



  always @(posedge clk or posedge reset)
    begin : validin_register_process
      if (reset == 1'b1) begin
        dvalidin <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          dvalidin <= validIn;
        end
      end
    end



  assign tcsSel = processMsg & dvalidin;



  assign csSel = tcsSel | padZero;



  assign rpadZero =  ~ padZero;



  // Selection signal: Select input data or pad zeros
  assign dataSel = rpadZero & dvalidin;



  // Padding zeros
  assign padingzeros[0] = 1'b0;
  assign padingzeros[1] = 1'b0;
  assign padingzeros[2] = 1'b0;
  assign padingzeros[3] = 1'b0;
  assign padingzeros[4] = 1'b0;
  assign padingzeros[5] = 1'b0;
  assign padingzeros[6] = 1'b0;
  assign padingzeros[7] = 1'b0;
  assign padingzeros[8] = 1'b0;
  assign padingzeros[9] = 1'b0;
  assign padingzeros[10] = 1'b0;
  assign padingzeros[11] = 1'b0;
  assign padingzeros[12] = 1'b0;
  assign padingzeros[13] = 1'b0;
  assign padingzeros[14] = 1'b0;
  assign padingzeros[15] = 1'b0;
  assign padingzeros[16] = 1'b0;
  assign padingzeros[17] = 1'b0;
  assign padingzeros[18] = 1'b0;
  assign padingzeros[19] = 1'b0;
  assign padingzeros[20] = 1'b0;
  assign padingzeros[21] = 1'b0;
  assign padingzeros[22] = 1'b0;
  assign padingzeros[23] = 1'b0;
  assign padingzeros[24] = 1'b0;
  assign padingzeros[25] = 1'b0;
  assign padingzeros[26] = 1'b0;
  assign padingzeros[27] = 1'b0;
  assign padingzeros[28] = 1'b0;
  assign padingzeros[29] = 1'b0;
  assign padingzeros[30] = 1'b0;
  assign padingzeros[31] = 1'b0;



  assign inputzeros[0] = 1'b0;
  assign inputzeros[1] = 1'b0;
  assign inputzeros[2] = 1'b0;
  assign inputzeros[3] = 1'b0;
  assign inputzeros[4] = 1'b0;
  assign inputzeros[5] = 1'b0;
  assign inputzeros[6] = 1'b0;
  assign inputzeros[7] = 1'b0;
  assign inputzeros[8] = 1'b0;
  assign inputzeros[9] = 1'b0;
  assign inputzeros[10] = 1'b0;
  assign inputzeros[11] = 1'b0;
  assign inputzeros[12] = 1'b0;
  assign inputzeros[13] = 1'b0;
  assign inputzeros[14] = 1'b0;
  assign inputzeros[15] = 1'b0;
  assign inputzeros[16] = 1'b0;
  assign inputzeros[17] = 1'b0;
  assign inputzeros[18] = 1'b0;
  assign inputzeros[19] = 1'b0;
  assign inputzeros[20] = 1'b0;
  assign inputzeros[21] = 1'b0;
  assign inputzeros[22] = 1'b0;
  assign inputzeros[23] = 1'b0;
  assign inputzeros[24] = 1'b0;
  assign inputzeros[25] = 1'b0;
  assign inputzeros[26] = 1'b0;
  assign inputzeros[27] = 1'b0;
  assign inputzeros[28] = 1'b0;
  assign inputzeros[29] = 1'b0;
  assign inputzeros[30] = 1'b0;



  // Prepare inputs for parallel CRC computation
  assign datamux[0] = inputzeros[0];
  assign datamux[1] = inputzeros[1];
  assign datamux[2] = inputzeros[2];
  assign datamux[3] = inputzeros[3];
  assign datamux[4] = inputzeros[4];
  assign datamux[5] = inputzeros[5];
  assign datamux[6] = inputzeros[6];
  assign datamux[7] = inputzeros[7];
  assign datamux[8] = inputzeros[8];
  assign datamux[9] = inputzeros[9];
  assign datamux[10] = inputzeros[10];
  assign datamux[11] = inputzeros[11];
  assign datamux[12] = inputzeros[12];
  assign datamux[13] = inputzeros[13];
  assign datamux[14] = inputzeros[14];
  assign datamux[15] = inputzeros[15];
  assign datamux[16] = inputzeros[16];
  assign datamux[17] = inputzeros[17];
  assign datamux[18] = inputzeros[18];
  assign datamux[19] = inputzeros[19];
  assign datamux[20] = inputzeros[20];
  assign datamux[21] = inputzeros[21];
  assign datamux[22] = inputzeros[22];
  assign datamux[23] = inputzeros[23];
  assign datamux[24] = inputzeros[24];
  assign datamux[25] = inputzeros[25];
  assign datamux[26] = inputzeros[26];
  assign datamux[27] = inputzeros[27];
  assign datamux[28] = inputzeros[28];
  assign datamux[29] = inputzeros[29];
  assign datamux[30] = inputzeros[30];
  assign datamux[31] = datainReg;

  // Switch between input data and padded zeros
  assign datacpt[0] = (dataSel == 1'b0 ? padingzeros[0] :
              datamux[0]);
  assign datacpt[1] = (dataSel == 1'b0 ? padingzeros[1] :
              datamux[1]);
  assign datacpt[2] = (dataSel == 1'b0 ? padingzeros[2] :
              datamux[2]);
  assign datacpt[3] = (dataSel == 1'b0 ? padingzeros[3] :
              datamux[3]);
  assign datacpt[4] = (dataSel == 1'b0 ? padingzeros[4] :
              datamux[4]);
  assign datacpt[5] = (dataSel == 1'b0 ? padingzeros[5] :
              datamux[5]);
  assign datacpt[6] = (dataSel == 1'b0 ? padingzeros[6] :
              datamux[6]);
  assign datacpt[7] = (dataSel == 1'b0 ? padingzeros[7] :
              datamux[7]);
  assign datacpt[8] = (dataSel == 1'b0 ? padingzeros[8] :
              datamux[8]);
  assign datacpt[9] = (dataSel == 1'b0 ? padingzeros[9] :
              datamux[9]);
  assign datacpt[10] = (dataSel == 1'b0 ? padingzeros[10] :
              datamux[10]);
  assign datacpt[11] = (dataSel == 1'b0 ? padingzeros[11] :
              datamux[11]);
  assign datacpt[12] = (dataSel == 1'b0 ? padingzeros[12] :
              datamux[12]);
  assign datacpt[13] = (dataSel == 1'b0 ? padingzeros[13] :
              datamux[13]);
  assign datacpt[14] = (dataSel == 1'b0 ? padingzeros[14] :
              datamux[14]);
  assign datacpt[15] = (dataSel == 1'b0 ? padingzeros[15] :
              datamux[15]);
  assign datacpt[16] = (dataSel == 1'b0 ? padingzeros[16] :
              datamux[16]);
  assign datacpt[17] = (dataSel == 1'b0 ? padingzeros[17] :
              datamux[17]);
  assign datacpt[18] = (dataSel == 1'b0 ? padingzeros[18] :
              datamux[18]);
  assign datacpt[19] = (dataSel == 1'b0 ? padingzeros[19] :
              datamux[19]);
  assign datacpt[20] = (dataSel == 1'b0 ? padingzeros[20] :
              datamux[20]);
  assign datacpt[21] = (dataSel == 1'b0 ? padingzeros[21] :
              datamux[21]);
  assign datacpt[22] = (dataSel == 1'b0 ? padingzeros[22] :
              datamux[22]);
  assign datacpt[23] = (dataSel == 1'b0 ? padingzeros[23] :
              datamux[23]);
  assign datacpt[24] = (dataSel == 1'b0 ? padingzeros[24] :
              datamux[24]);
  assign datacpt[25] = (dataSel == 1'b0 ? padingzeros[25] :
              datamux[25]);
  assign datacpt[26] = (dataSel == 1'b0 ? padingzeros[26] :
              datamux[26]);
  assign datacpt[27] = (dataSel == 1'b0 ? padingzeros[27] :
              datamux[27]);
  assign datacpt[28] = (dataSel == 1'b0 ? padingzeros[28] :
              datamux[28]);
  assign datacpt[29] = (dataSel == 1'b0 ? padingzeros[29] :
              datamux[29]);
  assign datacpt[30] = (dataSel == 1'b0 ? padingzeros[30] :
              datamux[30]);
  assign datacpt[31] = (dataSel == 1'b0 ? padingzeros[31] :
              datamux[31]);



  assign datacpt_31 = datacpt[31];

  assign datacpt_30 = datacpt[30];

  assign datacpt_29 = datacpt[29];

  assign datacpt_28 = datacpt[28];

  assign datacpt_27 = datacpt[27];

  assign datacpt_26 = datacpt[26];

  assign datacpt_25 = datacpt[25];

  assign datacpt_24 = datacpt[24];

  assign datacpt_23 = datacpt[23];

  assign datacpt_22 = datacpt[22];

  assign datacpt_21 = datacpt[21];

  assign datacpt_20 = datacpt[20];

  assign datacpt_19 = datacpt[19];

  assign datacpt_18 = datacpt[18];

  assign datacpt_17 = datacpt[17];

  assign datacpt_16 = datacpt[16];

  assign datacpt_15 = datacpt[15];

  assign datacpt_14 = datacpt[14];

  assign datacpt_13 = datacpt[13];

  assign datacpt_12 = datacpt[12];

  assign datacpt_11 = datacpt[11];

  assign datacpt_10 = datacpt[10];

  assign datacpt_9 = datacpt[9];

  assign datacpt_8 = datacpt[8];

  assign datacpt_7 = datacpt[7];

  assign datacpt_6 = datacpt[6];

  assign datacpt_5 = datacpt[5];

  assign datacpt_4 = datacpt[4];

  assign datacpt_3 = datacpt[3];

  assign datacpt_2 = datacpt[2];

  assign datacpt_1 = datacpt[1];

  assign datacpt_0 = datacpt[0];

  // Compute finalXor
  assign finalXorValue[0] = 1'b0;
  assign finalXorValue[1] = 1'b0;
  assign finalXorValue[2] = 1'b0;
  assign finalXorValue[3] = 1'b0;
  assign finalXorValue[4] = 1'b0;
  assign finalXorValue[5] = 1'b0;
  assign finalXorValue[6] = 1'b0;
  assign finalXorValue[7] = 1'b0;
  assign finalXorValue[8] = 1'b0;
  assign finalXorValue[9] = 1'b0;
  assign finalXorValue[10] = 1'b0;
  assign finalXorValue[11] = 1'b0;
  assign finalXorValue[12] = 1'b0;
  assign finalXorValue[13] = 1'b0;
  assign finalXorValue[14] = 1'b0;
  assign finalXorValue[15] = 1'b0;
  assign finalXorValue[16] = 1'b0;
  assign finalXorValue[17] = 1'b0;
  assign finalXorValue[18] = 1'b0;
  assign finalXorValue[19] = 1'b0;
  assign finalXorValue[20] = 1'b0;
  assign finalXorValue[21] = 1'b0;
  assign finalXorValue[22] = 1'b0;
  assign finalXorValue[23] = 1'b0;
  assign finalXorValue[24] = 1'b0;
  assign finalXorValue[25] = 1'b0;
  assign finalXorValue[26] = 1'b0;
  assign finalXorValue[27] = 1'b0;
  assign finalXorValue[28] = 1'b0;
  assign finalXorValue[29] = 1'b0;
  assign finalXorValue[30] = 1'b0;
  assign finalXorValue[31] = 1'b0;



  assign finalXorValue_0 = finalXorValue[0];

  assign finalXorValue_1 = finalXorValue[1];

  assign finalXorValue_2 = finalXorValue[2];

  assign finalXorValue_3 = finalXorValue[3];

  assign finalXorValue_4 = finalXorValue[4];

  assign finalXorValue_5 = finalXorValue[5];

  assign finalXorValue_6 = finalXorValue[6];

  assign finalXorValue_7 = finalXorValue[7];

  assign finalXorValue_8 = finalXorValue[8];

  assign finalXorValue_9 = finalXorValue[9];

  assign finalXorValue_10 = finalXorValue[10];

  assign finalXorValue_11 = finalXorValue[11];

  assign finalXorValue_12 = finalXorValue[12];

  assign finalXorValue_13 = finalXorValue[13];

  assign finalXorValue_14 = finalXorValue[14];

  assign finalXorValue_15 = finalXorValue[15];

  assign finalXorValue_16 = finalXorValue[16];

  assign finalXorValue_17 = finalXorValue[17];

  assign finalXorValue_18 = finalXorValue[18];

  assign finalXorValue_19 = finalXorValue[19];

  assign finalXorValue_20 = finalXorValue[20];

  assign finalXorValue_21 = finalXorValue[21];

  assign finalXorValue_22 = finalXorValue[22];

  assign finalXorValue_23 = finalXorValue[23];

  assign finalXorValue_24 = finalXorValue[24];

  assign finalXorValue_25 = finalXorValue[25];

  assign finalXorValue_26 = finalXorValue[26];

  assign finalXorValue_27 = finalXorValue[27];

  assign finalXorValue_28 = finalXorValue[28];

  assign finalXorValue_29 = finalXorValue[29];

  assign finalXorValue_30 = finalXorValue[30];

  assign finalXorValue_31 = finalXorValue[31];

  assign newChecksum_0 = newChecksum[0];

  assign refelctCheckSum_31 = newChecksum_0 ^ finalXorValue_31;



  assign newChecksum_1 = newChecksum[1];

  assign refelctCheckSum_30 = newChecksum_1 ^ finalXorValue_30;



  assign newChecksum_2 = newChecksum[2];

  assign refelctCheckSum_29 = newChecksum_2 ^ finalXorValue_29;



  assign newChecksum_3 = newChecksum[3];

  assign refelctCheckSum_28 = newChecksum_3 ^ finalXorValue_28;



  assign newChecksum_4 = newChecksum[4];

  assign refelctCheckSum_27 = newChecksum_4 ^ finalXorValue_27;



  assign newChecksum_5 = newChecksum[5];

  assign refelctCheckSum_26 = newChecksum_5 ^ finalXorValue_26;



  assign newChecksum_6 = newChecksum[6];

  assign refelctCheckSum_25 = newChecksum_6 ^ finalXorValue_25;



  assign newChecksum_7 = newChecksum[7];

  assign refelctCheckSum_24 = newChecksum_7 ^ finalXorValue_24;



  assign newChecksum_8 = newChecksum[8];

  assign refelctCheckSum_23 = newChecksum_8 ^ finalXorValue_23;



  assign newChecksum_9 = newChecksum[9];

  assign refelctCheckSum_22 = newChecksum_9 ^ finalXorValue_22;



  assign newChecksum_10 = newChecksum[10];

  assign refelctCheckSum_21 = newChecksum_10 ^ finalXorValue_21;



  assign newChecksum_11 = newChecksum[11];

  assign refelctCheckSum_20 = newChecksum_11 ^ finalXorValue_20;



  assign newChecksum_12 = newChecksum[12];

  assign refelctCheckSum_19 = newChecksum_12 ^ finalXorValue_19;



  assign newChecksum_13 = newChecksum[13];

  assign refelctCheckSum_18 = newChecksum_13 ^ finalXorValue_18;



  assign newChecksum_14 = newChecksum[14];

  assign refelctCheckSum_17 = newChecksum_14 ^ finalXorValue_17;



  assign newChecksum_15 = newChecksum[15];

  assign refelctCheckSum_16 = newChecksum_15 ^ finalXorValue_16;



  assign newChecksum_16 = newChecksum[16];

  assign refelctCheckSum_15 = newChecksum_16 ^ finalXorValue_15;



  assign newChecksum_17 = newChecksum[17];

  assign refelctCheckSum_14 = newChecksum_17 ^ finalXorValue_14;



  assign newChecksum_18 = newChecksum[18];

  assign refelctCheckSum_13 = newChecksum_18 ^ finalXorValue_13;



  assign newChecksum_19 = newChecksum[19];

  assign refelctCheckSum_12 = newChecksum_19 ^ finalXorValue_12;



  assign newChecksum_20 = newChecksum[20];

  assign refelctCheckSum_11 = newChecksum_20 ^ finalXorValue_11;



  assign newChecksum_21 = newChecksum[21];

  assign refelctCheckSum_10 = newChecksum_21 ^ finalXorValue_10;



  assign newChecksum_22 = newChecksum[22];

  assign refelctCheckSum_9 = newChecksum_22 ^ finalXorValue_9;



  assign newChecksum_23 = newChecksum[23];

  assign refelctCheckSum_8 = newChecksum_23 ^ finalXorValue_8;



  assign newChecksum_24 = newChecksum[24];

  assign refelctCheckSum_7 = newChecksum_24 ^ finalXorValue_7;



  assign newChecksum_25 = newChecksum[25];

  assign refelctCheckSum_6 = newChecksum_25 ^ finalXorValue_6;



  assign newChecksum_26 = newChecksum[26];

  assign refelctCheckSum_5 = newChecksum_26 ^ finalXorValue_5;



  assign newChecksum_27 = newChecksum[27];

  assign refelctCheckSum_4 = newChecksum_27 ^ finalXorValue_4;



  assign newChecksum_28 = newChecksum[28];

  assign refelctCheckSum_3 = newChecksum_28 ^ finalXorValue_3;



  assign newChecksum_29 = newChecksum[29];

  assign refelctCheckSum_2 = newChecksum_29 ^ finalXorValue_2;



  assign newChecksum_30 = newChecksum[30];

  assign refelctCheckSum_1 = newChecksum_30 ^ finalXorValue_1;



  // Reflect Checksum and make checksum LSB first
  assign newChecksum_31 = newChecksum[31];

  assign refelctCheckSum_0 = newChecksum_31 ^ finalXorValue_0;



  assign xoredChecksum[0] = refelctCheckSum_0;
  assign xoredChecksum[1] = refelctCheckSum_1;
  assign xoredChecksum[2] = refelctCheckSum_2;
  assign xoredChecksum[3] = refelctCheckSum_3;
  assign xoredChecksum[4] = refelctCheckSum_4;
  assign xoredChecksum[5] = refelctCheckSum_5;
  assign xoredChecksum[6] = refelctCheckSum_6;
  assign xoredChecksum[7] = refelctCheckSum_7;
  assign xoredChecksum[8] = refelctCheckSum_8;
  assign xoredChecksum[9] = refelctCheckSum_9;
  assign xoredChecksum[10] = refelctCheckSum_10;
  assign xoredChecksum[11] = refelctCheckSum_11;
  assign xoredChecksum[12] = refelctCheckSum_12;
  assign xoredChecksum[13] = refelctCheckSum_13;
  assign xoredChecksum[14] = refelctCheckSum_14;
  assign xoredChecksum[15] = refelctCheckSum_15;
  assign xoredChecksum[16] = refelctCheckSum_16;
  assign xoredChecksum[17] = refelctCheckSum_17;
  assign xoredChecksum[18] = refelctCheckSum_18;
  assign xoredChecksum[19] = refelctCheckSum_19;
  assign xoredChecksum[20] = refelctCheckSum_20;
  assign xoredChecksum[21] = refelctCheckSum_21;
  assign xoredChecksum[22] = refelctCheckSum_22;
  assign xoredChecksum[23] = refelctCheckSum_23;
  assign xoredChecksum[24] = refelctCheckSum_24;
  assign xoredChecksum[25] = refelctCheckSum_25;
  assign xoredChecksum[26] = refelctCheckSum_26;
  assign xoredChecksum[27] = refelctCheckSum_27;
  assign xoredChecksum[28] = refelctCheckSum_28;
  assign xoredChecksum[29] = refelctCheckSum_29;
  assign xoredChecksum[30] = refelctCheckSum_30;
  assign xoredChecksum[31] = refelctCheckSum_31;

  assign checksumReg_30 = checksumReg[30];

  // Compute checksum element32
  assign tcs_entry31 = checksumReg_30 ^ datacpt_0;



  assign checksumReg_29 = checksumReg[29];

  // Compute checksum element31
  assign tcs_entry30 = checksumReg_29 ^ datacpt_1;



  assign checksumReg_28 = checksumReg[28];

  // Compute checksum element30
  assign tcs_entry29 = checksumReg_28 ^ datacpt_2;



  assign checksumReg_27 = checksumReg[27];

  // Compute checksum element29
  assign tcs_entry28 = checksumReg_27 ^ datacpt_3;



  assign checksumReg_26 = checksumReg[26];

  // Compute checksum element28
  assign tcs_entry27 = checksumReg_26 ^ datacpt_4;



  assign checksumReg_25 = checksumReg[25];

  // Compute checksum element27
  assign tcs_entry26 = datacpt_5 ^ (checksumReg_31 ^ checksumReg_25);



  assign checksumReg_24 = checksumReg[24];

  // Compute checksum element26
  assign tcs_entry25 = checksumReg_24 ^ datacpt_6;



  assign checksumReg_23 = checksumReg[23];

  // Compute checksum element25
  assign tcs_entry24 = checksumReg_23 ^ datacpt_7;



  assign checksumReg_22 = checksumReg[22];

  // Compute checksum element24
  assign tcs_entry23 = datacpt_8 ^ (checksumReg_31 ^ checksumReg_22);



  assign checksumReg_21 = checksumReg[21];

  // Compute checksum element23
  assign tcs_entry22 = datacpt_9 ^ (checksumReg_31 ^ checksumReg_21);



  assign checksumReg_20 = checksumReg[20];

  // Compute checksum element22
  assign tcs_entry21 = checksumReg_20 ^ datacpt_10;



  assign checksumReg_19 = checksumReg[19];

  // Compute checksum element21
  assign tcs_entry20 = checksumReg_19 ^ datacpt_11;



  assign checksumReg_18 = checksumReg[18];

  // Compute checksum element20
  assign tcs_entry19 = checksumReg_18 ^ datacpt_12;



  assign checksumReg_17 = checksumReg[17];

  // Compute checksum element19
  assign tcs_entry18 = checksumReg_17 ^ datacpt_13;



  assign checksumReg_16 = checksumReg[16];

  // Compute checksum element18
  assign tcs_entry17 = checksumReg_16 ^ datacpt_14;



  assign checksumReg_15 = checksumReg[15];

  // Compute checksum element17
  assign tcs_entry16 = datacpt_15 ^ (checksumReg_31 ^ checksumReg_15);



  assign checksumReg_14 = checksumReg[14];

  // Compute checksum element16
  assign tcs_entry15 = checksumReg_14 ^ datacpt_16;



  assign checksumReg_13 = checksumReg[13];

  // Compute checksum element15
  assign tcs_entry14 = checksumReg_13 ^ datacpt_17;



  assign checksumReg_12 = checksumReg[12];

  // Compute checksum element14
  assign tcs_entry13 = checksumReg_12 ^ datacpt_18;



  assign checksumReg_11 = checksumReg[11];

  // Compute checksum element13
  assign tcs_entry12 = datacpt_19 ^ (checksumReg_31 ^ checksumReg_11);



  assign checksumReg_10 = checksumReg[10];

  // Compute checksum element12
  assign tcs_entry11 = datacpt_20 ^ (checksumReg_31 ^ checksumReg_10);



  assign checksumReg_9 = checksumReg[9];

  // Compute checksum element11
  assign tcs_entry10 = datacpt_21 ^ (checksumReg_31 ^ checksumReg_9);



  assign checksumReg_8 = checksumReg[8];

  // Compute checksum element10
  assign tcs_entry9 = checksumReg_8 ^ datacpt_22;



  assign checksumReg_7 = checksumReg[7];

  // Compute checksum element9
  assign tcs_entry8 = datacpt_23 ^ (checksumReg_31 ^ checksumReg_7);



  assign checksumReg_6 = checksumReg[6];

  // Compute checksum element8
  assign tcs_entry7 = datacpt_24 ^ (checksumReg_31 ^ checksumReg_6);



  assign checksumReg_5 = checksumReg[5];

  // Compute checksum element7
  assign tcs_entry6 = checksumReg_5 ^ datacpt_25;



  assign checksumReg_4 = checksumReg[4];

  // Compute checksum element6
  assign tcs_entry5 = datacpt_26 ^ (checksumReg_31 ^ checksumReg_4);



  assign checksumReg_3 = checksumReg[3];

  // Compute checksum element5
  assign tcs_entry4 = datacpt_27 ^ (checksumReg_31 ^ checksumReg_3);



  assign checksumReg_2 = checksumReg[2];

  // Compute checksum element4
  assign tcs_entry3 = checksumReg_2 ^ datacpt_28;



  assign checksumReg_1 = checksumReg[1];

  // Compute checksum element3
  assign tcs_entry2 = datacpt_29 ^ (checksumReg_31 ^ checksumReg_1);



  assign checksumReg_0 = checksumReg[0];

  // Compute checksum element2
  assign tcs_entry1 = datacpt_30 ^ (checksumReg_31 ^ checksumReg_0);



  assign checksumReg_31 = checksumReg[31];

  // Compute checksum element1
  // Checksum selection signal
  assign tcs_entry0 = checksumReg_31 ^ datacpt_31;



  assign tchecksum[0] = tcs_entry0;
  assign tchecksum[1] = tcs_entry1;
  assign tchecksum[2] = tcs_entry2;
  assign tchecksum[3] = tcs_entry3;
  assign tchecksum[4] = tcs_entry4;
  assign tchecksum[5] = tcs_entry5;
  assign tchecksum[6] = tcs_entry6;
  assign tchecksum[7] = tcs_entry7;
  assign tchecksum[8] = tcs_entry8;
  assign tchecksum[9] = tcs_entry9;
  assign tchecksum[10] = tcs_entry10;
  assign tchecksum[11] = tcs_entry11;
  assign tchecksum[12] = tcs_entry12;
  assign tchecksum[13] = tcs_entry13;
  assign tchecksum[14] = tcs_entry14;
  assign tchecksum[15] = tcs_entry15;
  assign tchecksum[16] = tcs_entry16;
  assign tchecksum[17] = tcs_entry17;
  assign tchecksum[18] = tcs_entry18;
  assign tchecksum[19] = tcs_entry19;
  assign tchecksum[20] = tcs_entry20;
  assign tchecksum[21] = tcs_entry21;
  assign tchecksum[22] = tcs_entry22;
  assign tchecksum[23] = tcs_entry23;
  assign tchecksum[24] = tcs_entry24;
  assign tchecksum[25] = tcs_entry25;
  assign tchecksum[26] = tcs_entry26;
  assign tchecksum[27] = tcs_entry27;
  assign tchecksum[28] = tcs_entry28;
  assign tchecksum[29] = tcs_entry29;
  assign tchecksum[30] = tcs_entry30;
  assign tchecksum[31] = tcs_entry31;

  always @(posedge clk or posedge reset)
    begin : checksum_register_process
      if (reset == 1'b1) begin
        checksumReg[0] <= 1'b0;
        checksumReg[1] <= 1'b0;
        checksumReg[2] <= 1'b0;
        checksumReg[3] <= 1'b0;
        checksumReg[4] <= 1'b0;
        checksumReg[5] <= 1'b0;
        checksumReg[6] <= 1'b0;
        checksumReg[7] <= 1'b0;
        checksumReg[8] <= 1'b0;
        checksumReg[9] <= 1'b0;
        checksumReg[10] <= 1'b0;
        checksumReg[11] <= 1'b0;
        checksumReg[12] <= 1'b0;
        checksumReg[13] <= 1'b0;
        checksumReg[14] <= 1'b0;
        checksumReg[15] <= 1'b0;
        checksumReg[16] <= 1'b0;
        checksumReg[17] <= 1'b0;
        checksumReg[18] <= 1'b0;
        checksumReg[19] <= 1'b0;
        checksumReg[20] <= 1'b0;
        checksumReg[21] <= 1'b0;
        checksumReg[22] <= 1'b0;
        checksumReg[23] <= 1'b0;
        checksumReg[24] <= 1'b0;
        checksumReg[25] <= 1'b0;
        checksumReg[26] <= 1'b0;
        checksumReg[27] <= 1'b0;
        checksumReg[28] <= 1'b0;
        checksumReg[29] <= 1'b0;
        checksumReg[30] <= 1'b0;
        checksumReg[31] <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          if (xoredSel == 1'b1) begin
            checksumReg[0] <= 1'b0;
            checksumReg[1] <= 1'b0;
            checksumReg[2] <= 1'b0;
            checksumReg[3] <= 1'b0;
            checksumReg[4] <= 1'b0;
            checksumReg[5] <= 1'b0;
            checksumReg[6] <= 1'b0;
            checksumReg[7] <= 1'b0;
            checksumReg[8] <= 1'b0;
            checksumReg[9] <= 1'b0;
            checksumReg[10] <= 1'b0;
            checksumReg[11] <= 1'b0;
            checksumReg[12] <= 1'b0;
            checksumReg[13] <= 1'b0;
            checksumReg[14] <= 1'b0;
            checksumReg[15] <= 1'b0;
            checksumReg[16] <= 1'b0;
            checksumReg[17] <= 1'b0;
            checksumReg[18] <= 1'b0;
            checksumReg[19] <= 1'b0;
            checksumReg[20] <= 1'b0;
            checksumReg[21] <= 1'b0;
            checksumReg[22] <= 1'b0;
            checksumReg[23] <= 1'b0;
            checksumReg[24] <= 1'b0;
            checksumReg[25] <= 1'b0;
            checksumReg[26] <= 1'b0;
            checksumReg[27] <= 1'b0;
            checksumReg[28] <= 1'b0;
            checksumReg[29] <= 1'b0;
            checksumReg[30] <= 1'b0;
            checksumReg[31] <= 1'b0;
          end
          else begin
            checksumReg[0] <= finalChecksum[0];
            checksumReg[1] <= finalChecksum[1];
            checksumReg[2] <= finalChecksum[2];
            checksumReg[3] <= finalChecksum[3];
            checksumReg[4] <= finalChecksum[4];
            checksumReg[5] <= finalChecksum[5];
            checksumReg[6] <= finalChecksum[6];
            checksumReg[7] <= finalChecksum[7];
            checksumReg[8] <= finalChecksum[8];
            checksumReg[9] <= finalChecksum[9];
            checksumReg[10] <= finalChecksum[10];
            checksumReg[11] <= finalChecksum[11];
            checksumReg[12] <= finalChecksum[12];
            checksumReg[13] <= finalChecksum[13];
            checksumReg[14] <= finalChecksum[14];
            checksumReg[15] <= finalChecksum[15];
            checksumReg[16] <= finalChecksum[16];
            checksumReg[17] <= finalChecksum[17];
            checksumReg[18] <= finalChecksum[18];
            checksumReg[19] <= finalChecksum[19];
            checksumReg[20] <= finalChecksum[20];
            checksumReg[21] <= finalChecksum[21];
            checksumReg[22] <= finalChecksum[22];
            checksumReg[23] <= finalChecksum[23];
            checksumReg[24] <= finalChecksum[24];
            checksumReg[25] <= finalChecksum[25];
            checksumReg[26] <= finalChecksum[26];
            checksumReg[27] <= finalChecksum[27];
            checksumReg[28] <= finalChecksum[28];
            checksumReg[29] <= finalChecksum[29];
            checksumReg[30] <= finalChecksum[30];
            checksumReg[31] <= finalChecksum[31];
          end
        end
      end
    end



  // Update checksum register for valid inputs
  assign newChecksum[0] = (csSel == 1'b0 ? checksumReg[0] :
              tchecksum[0]);
  assign newChecksum[1] = (csSel == 1'b0 ? checksumReg[1] :
              tchecksum[1]);
  assign newChecksum[2] = (csSel == 1'b0 ? checksumReg[2] :
              tchecksum[2]);
  assign newChecksum[3] = (csSel == 1'b0 ? checksumReg[3] :
              tchecksum[3]);
  assign newChecksum[4] = (csSel == 1'b0 ? checksumReg[4] :
              tchecksum[4]);
  assign newChecksum[5] = (csSel == 1'b0 ? checksumReg[5] :
              tchecksum[5]);
  assign newChecksum[6] = (csSel == 1'b0 ? checksumReg[6] :
              tchecksum[6]);
  assign newChecksum[7] = (csSel == 1'b0 ? checksumReg[7] :
              tchecksum[7]);
  assign newChecksum[8] = (csSel == 1'b0 ? checksumReg[8] :
              tchecksum[8]);
  assign newChecksum[9] = (csSel == 1'b0 ? checksumReg[9] :
              tchecksum[9]);
  assign newChecksum[10] = (csSel == 1'b0 ? checksumReg[10] :
              tchecksum[10]);
  assign newChecksum[11] = (csSel == 1'b0 ? checksumReg[11] :
              tchecksum[11]);
  assign newChecksum[12] = (csSel == 1'b0 ? checksumReg[12] :
              tchecksum[12]);
  assign newChecksum[13] = (csSel == 1'b0 ? checksumReg[13] :
              tchecksum[13]);
  assign newChecksum[14] = (csSel == 1'b0 ? checksumReg[14] :
              tchecksum[14]);
  assign newChecksum[15] = (csSel == 1'b0 ? checksumReg[15] :
              tchecksum[15]);
  assign newChecksum[16] = (csSel == 1'b0 ? checksumReg[16] :
              tchecksum[16]);
  assign newChecksum[17] = (csSel == 1'b0 ? checksumReg[17] :
              tchecksum[17]);
  assign newChecksum[18] = (csSel == 1'b0 ? checksumReg[18] :
              tchecksum[18]);
  assign newChecksum[19] = (csSel == 1'b0 ? checksumReg[19] :
              tchecksum[19]);
  assign newChecksum[20] = (csSel == 1'b0 ? checksumReg[20] :
              tchecksum[20]);
  assign newChecksum[21] = (csSel == 1'b0 ? checksumReg[21] :
              tchecksum[21]);
  assign newChecksum[22] = (csSel == 1'b0 ? checksumReg[22] :
              tchecksum[22]);
  assign newChecksum[23] = (csSel == 1'b0 ? checksumReg[23] :
              tchecksum[23]);
  assign newChecksum[24] = (csSel == 1'b0 ? checksumReg[24] :
              tchecksum[24]);
  assign newChecksum[25] = (csSel == 1'b0 ? checksumReg[25] :
              tchecksum[25]);
  assign newChecksum[26] = (csSel == 1'b0 ? checksumReg[26] :
              tchecksum[26]);
  assign newChecksum[27] = (csSel == 1'b0 ? checksumReg[27] :
              tchecksum[27]);
  assign newChecksum[28] = (csSel == 1'b0 ? checksumReg[28] :
              tchecksum[28]);
  assign newChecksum[29] = (csSel == 1'b0 ? checksumReg[29] :
              tchecksum[29]);
  assign newChecksum[30] = (csSel == 1'b0 ? checksumReg[30] :
              tchecksum[30]);
  assign newChecksum[31] = (csSel == 1'b0 ? checksumReg[31] :
              tchecksum[31]);



  // Xor after computing the checksum
  assign finalChecksum[0] = (xoredSel == 1'b0 ? newChecksum[0] :
              xoredChecksum[0]);
  assign finalChecksum[1] = (xoredSel == 1'b0 ? newChecksum[1] :
              xoredChecksum[1]);
  assign finalChecksum[2] = (xoredSel == 1'b0 ? newChecksum[2] :
              xoredChecksum[2]);
  assign finalChecksum[3] = (xoredSel == 1'b0 ? newChecksum[3] :
              xoredChecksum[3]);
  assign finalChecksum[4] = (xoredSel == 1'b0 ? newChecksum[4] :
              xoredChecksum[4]);
  assign finalChecksum[5] = (xoredSel == 1'b0 ? newChecksum[5] :
              xoredChecksum[5]);
  assign finalChecksum[6] = (xoredSel == 1'b0 ? newChecksum[6] :
              xoredChecksum[6]);
  assign finalChecksum[7] = (xoredSel == 1'b0 ? newChecksum[7] :
              xoredChecksum[7]);
  assign finalChecksum[8] = (xoredSel == 1'b0 ? newChecksum[8] :
              xoredChecksum[8]);
  assign finalChecksum[9] = (xoredSel == 1'b0 ? newChecksum[9] :
              xoredChecksum[9]);
  assign finalChecksum[10] = (xoredSel == 1'b0 ? newChecksum[10] :
              xoredChecksum[10]);
  assign finalChecksum[11] = (xoredSel == 1'b0 ? newChecksum[11] :
              xoredChecksum[11]);
  assign finalChecksum[12] = (xoredSel == 1'b0 ? newChecksum[12] :
              xoredChecksum[12]);
  assign finalChecksum[13] = (xoredSel == 1'b0 ? newChecksum[13] :
              xoredChecksum[13]);
  assign finalChecksum[14] = (xoredSel == 1'b0 ? newChecksum[14] :
              xoredChecksum[14]);
  assign finalChecksum[15] = (xoredSel == 1'b0 ? newChecksum[15] :
              xoredChecksum[15]);
  assign finalChecksum[16] = (xoredSel == 1'b0 ? newChecksum[16] :
              xoredChecksum[16]);
  assign finalChecksum[17] = (xoredSel == 1'b0 ? newChecksum[17] :
              xoredChecksum[17]);
  assign finalChecksum[18] = (xoredSel == 1'b0 ? newChecksum[18] :
              xoredChecksum[18]);
  assign finalChecksum[19] = (xoredSel == 1'b0 ? newChecksum[19] :
              xoredChecksum[19]);
  assign finalChecksum[20] = (xoredSel == 1'b0 ? newChecksum[20] :
              xoredChecksum[20]);
  assign finalChecksum[21] = (xoredSel == 1'b0 ? newChecksum[21] :
              xoredChecksum[21]);
  assign finalChecksum[22] = (xoredSel == 1'b0 ? newChecksum[22] :
              xoredChecksum[22]);
  assign finalChecksum[23] = (xoredSel == 1'b0 ? newChecksum[23] :
              xoredChecksum[23]);
  assign finalChecksum[24] = (xoredSel == 1'b0 ? newChecksum[24] :
              xoredChecksum[24]);
  assign finalChecksum[25] = (xoredSel == 1'b0 ? newChecksum[25] :
              xoredChecksum[25]);
  assign finalChecksum[26] = (xoredSel == 1'b0 ? newChecksum[26] :
              xoredChecksum[26]);
  assign finalChecksum[27] = (xoredSel == 1'b0 ? newChecksum[27] :
              xoredChecksum[27]);
  assign finalChecksum[28] = (xoredSel == 1'b0 ? newChecksum[28] :
              xoredChecksum[28]);
  assign finalChecksum[29] = (xoredSel == 1'b0 ? newChecksum[29] :
              xoredChecksum[29]);
  assign finalChecksum[30] = (xoredSel == 1'b0 ? newChecksum[30] :
              xoredChecksum[30]);
  assign finalChecksum[31] = (xoredSel == 1'b0 ? newChecksum[31] :
              xoredChecksum[31]);



  // 1
  always @(posedge clk or posedge reset)
    begin : outputchecksum_register_process
      if (reset == 1'b1) begin
        crcChecksum[0] <= 1'b0;
        crcChecksum[1] <= 1'b0;
        crcChecksum[2] <= 1'b0;
        crcChecksum[3] <= 1'b0;
        crcChecksum[4] <= 1'b0;
        crcChecksum[5] <= 1'b0;
        crcChecksum[6] <= 1'b0;
        crcChecksum[7] <= 1'b0;
        crcChecksum[8] <= 1'b0;
        crcChecksum[9] <= 1'b0;
        crcChecksum[10] <= 1'b0;
        crcChecksum[11] <= 1'b0;
        crcChecksum[12] <= 1'b0;
        crcChecksum[13] <= 1'b0;
        crcChecksum[14] <= 1'b0;
        crcChecksum[15] <= 1'b0;
        crcChecksum[16] <= 1'b0;
        crcChecksum[17] <= 1'b0;
        crcChecksum[18] <= 1'b0;
        crcChecksum[19] <= 1'b0;
        crcChecksum[20] <= 1'b0;
        crcChecksum[21] <= 1'b0;
        crcChecksum[22] <= 1'b0;
        crcChecksum[23] <= 1'b0;
        crcChecksum[24] <= 1'b0;
        crcChecksum[25] <= 1'b0;
        crcChecksum[26] <= 1'b0;
        crcChecksum[27] <= 1'b0;
        crcChecksum[28] <= 1'b0;
        crcChecksum[29] <= 1'b0;
        crcChecksum[30] <= 1'b0;
        crcChecksum[31] <= 1'b0;
      end
      else begin
        if (enb_1_2_0 && xoredSel) begin
          crcChecksum[0] <= finalChecksum[0];
          crcChecksum[1] <= finalChecksum[1];
          crcChecksum[2] <= finalChecksum[2];
          crcChecksum[3] <= finalChecksum[3];
          crcChecksum[4] <= finalChecksum[4];
          crcChecksum[5] <= finalChecksum[5];
          crcChecksum[6] <= finalChecksum[6];
          crcChecksum[7] <= finalChecksum[7];
          crcChecksum[8] <= finalChecksum[8];
          crcChecksum[9] <= finalChecksum[9];
          crcChecksum[10] <= finalChecksum[10];
          crcChecksum[11] <= finalChecksum[11];
          crcChecksum[12] <= finalChecksum[12];
          crcChecksum[13] <= finalChecksum[13];
          crcChecksum[14] <= finalChecksum[14];
          crcChecksum[15] <= finalChecksum[15];
          crcChecksum[16] <= finalChecksum[16];
          crcChecksum[17] <= finalChecksum[17];
          crcChecksum[18] <= finalChecksum[18];
          crcChecksum[19] <= finalChecksum[19];
          crcChecksum[20] <= finalChecksum[20];
          crcChecksum[21] <= finalChecksum[21];
          crcChecksum[22] <= finalChecksum[22];
          crcChecksum[23] <= finalChecksum[23];
          crcChecksum[24] <= finalChecksum[24];
          crcChecksum[25] <= finalChecksum[25];
          crcChecksum[26] <= finalChecksum[26];
          crcChecksum[27] <= finalChecksum[27];
          crcChecksum[28] <= finalChecksum[28];
          crcChecksum[29] <= finalChecksum[29];
          crcChecksum[30] <= finalChecksum[30];
          crcChecksum[31] <= finalChecksum[31];
        end
      end
    end



  assign crcChecksum_0 = crcChecksum[0];

  assign crcChecksum_1 = crcChecksum[1];

  assign crcChecksum_2 = crcChecksum[2];

  assign crcChecksum_3 = crcChecksum[3];

  assign crcChecksum_4 = crcChecksum[4];

  assign crcChecksum_5 = crcChecksum[5];

  assign crcChecksum_6 = crcChecksum[6];

  assign crcChecksum_7 = crcChecksum[7];

  assign crcChecksum_8 = crcChecksum[8];

  assign crcChecksum_9 = crcChecksum[9];

  assign crcChecksum_10 = crcChecksum[10];

  assign crcChecksum_11 = crcChecksum[11];

  assign crcChecksum_12 = crcChecksum[12];

  assign crcChecksum_13 = crcChecksum[13];

  assign crcChecksum_14 = crcChecksum[14];

  assign crcChecksum_15 = crcChecksum[15];

  assign crcChecksum_16 = crcChecksum[16];

  assign crcChecksum_17 = crcChecksum[17];

  assign crcChecksum_18 = crcChecksum[18];

  assign crcChecksum_19 = crcChecksum[19];

  assign crcChecksum_20 = crcChecksum[20];

  assign crcChecksum_21 = crcChecksum[21];

  assign crcChecksum_22 = crcChecksum[22];

  assign crcChecksum_23 = crcChecksum[23];

  assign crcChecksum_24 = crcChecksum[24];

  assign crcChecksum_25 = crcChecksum[25];

  assign crcChecksum_26 = crcChecksum[26];

  assign crcChecksum_27 = crcChecksum[27];

  assign crcChecksum_28 = crcChecksum[28];

  assign crcChecksum_29 = crcChecksum[29];

  assign crcChecksum_30 = crcChecksum[30];

  assign crcChecksum_31 = crcChecksum[31];

endmodule  // whdlOFDMTx_CRCGenCompute

