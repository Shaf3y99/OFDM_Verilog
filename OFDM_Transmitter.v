// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\OFDM_Transmitter.v
// Created: 2023-05-02 12:36:38
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 2.44141e-07
// Target subsystem base rate: 2.44141e-07
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out_1      4.88281e-07
// ce_out_0      7.8125e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// txData_re                     ce_out_0      7.8125e-06
// txData_im                     ce_out_0      7.8125e-06
// txValid                       ce_out_0      7.8125e-06
// ready                         ce_out_1      4.88281e-07
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: OFDM_Transmitter
// Source Path: whdlOFDMTransmitter_up_con/OFDM_UC/OFDM Transmitter
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module OFDM_Transmitter
          (clk,
           reset,
           clk_enable,
           modTypeIndex,
           codeRateIndex,
           data,
           valid,
           ce_out_0,
           ce_out_1,
           
           txData_re,
           txData_im,
           
           txValid,
           ready);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [1:0] modTypeIndex;  // ufix2
  input   [1:0] codeRateIndex;  // ufix2
  input   data;
  input   valid;
  output  ce_out_0;
  output  ce_out_1;
  
  output  signed [15:0] txData_re;
  output  signed [15:0] txData_im;  // sfix16_En13
  
  output  txValid;
  output  ready;


  wire enb_1_32_0;
  wire enb;
  wire enb_1_2_0;
  wire enb_1_32_1;
  wire enb_1_2_1;
  wire signed [15:0] whdlOFDMTx_Model_out1_re;  // sfix16_En13
  wire signed [15:0] whdlOFDMTx_Model_out1_im;  // sfix16_En13
  wire whdlOFDMTx_Model_out2;
  wire whdlOFDMTx_Model_out3;
  wire signed [15:0] txData_re;


  OFDM_Transmitter_tc u_OFDM_Transmitter_tc (.clk(clk),
                                             .reset(reset),
                                             .clk_enable(clk_enable),
                                             .enb(enb),
                                             .enb_1_2_0(enb_1_2_0),
                                             .enb_1_2_1(enb_1_2_1),
                                             .enb_1_32_0(enb_1_32_0),
                                             .enb_1_32_1(enb_1_32_1)
                                             );

  whdlOFDMTx_whdlOFDMTx u_whdlOFDMTx_Model (.clk(clk),
                                            .reset(reset),
                                            .enb_1_32_0(enb_1_32_0),
                                            .enb(enb),
                                            .enb_1_2_0(enb_1_2_0),
                                            .enb_1_32_1(enb_1_32_1),
                                            .modTypeIndex(modTypeIndex),  // ufix2
                                            .codeRateIndex(codeRateIndex),  // ufix2
                                            .data(data),
                                            .valid(valid),
                                            .txData_re(whdlOFDMTx_Model_out1_re),  // sfix16_En13
                                            .txData_im(whdlOFDMTx_Model_out1_im),  // sfix16_En13
                                            .txValid(whdlOFDMTx_Model_out2),
                                            .ready(whdlOFDMTx_Model_out3)
                                            );
  
  
   assign txData_re = whdlOFDMTx_Model_out1_re;  
                                           
                                            
   
                                

  assign txData_im = whdlOFDMTx_Model_out1_im;

  assign txValid = whdlOFDMTx_Model_out2;

  assign ready = whdlOFDMTx_Model_out3;

  assign ce_out_0 = enb_1_32_1;

  assign ce_out_1 = enb_1_2_1;

endmodule  // OFDM_Transmitter

