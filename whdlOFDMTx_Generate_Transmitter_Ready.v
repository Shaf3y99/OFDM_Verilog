// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Generate_Transmitter_Ready.v
// Created: 2023-05-02 12:36:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Generate_Transmitter_Ready
// Source Path: whdlOFDMTx/Frame Controller and Input Sampler/Frame Controller/Generate Transmitter Ready
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Generate_Transmitter_Ready
          (clk,
           reset,
           enb_1_2_0,
           valid,
           reset_1,
           trBlkSize,
           sampleInParam,
           dataValid,
           ready);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   valid;
  input   reset_1;
  input   [13:0] trBlkSize;  // ufix14
  output  sampleInParam;
  output  dataValid;
  output  ready;


  wire [13:0] count_step;  // ufix14
  wire [13:0] count_from;  // ufix14
  wire [13:0] count_reset;  // ufix14
  wire Constant_out1;  // ufix1
  wire signed [14:0] Add_sub_temp;  // sfix15
  wire signed [14:0] Add_1;  // sfix15
  wire signed [14:0] Add_2;  // sfix15
  wire [13:0] Add_out1;  // ufix14
  wire Logical_Operator_out1;
  wire Logical_Operator3_out1;
  reg [13:0] HDL_Counter_out1;  // ufix14
  wire Relational_Operator1_relop1;
  wire Logical_Operator2_out1;
  wire [13:0] count;  // ufix14
  wire need_to_wrap;
  wire [13:0] count_value;  // ufix14
  wire [13:0] count_1;  // ufix14
  wire [13:0] count_2;  // ufix14
  wire Relational_Operator_relop1;
  wire Logical_Operator4_out1;
  reg  Delay_out1;
  wire Compare_To_Constant_out1;
  wire Logical_Operator1_out1;


  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 9562
  assign count_step = 14'b00000000000001;



  assign count_from = 14'b00000000000000;



  assign count_reset = 14'b00000000000000;



  assign Constant_out1 = 1'b1;



  assign Add_1 = {1'b0, trBlkSize};
  assign Add_2 = {14'b0, Constant_out1};
  assign Add_sub_temp = Add_1 - Add_2;
  assign Add_out1 = Add_sub_temp[13:0];



  assign Logical_Operator3_out1 =  ~ Logical_Operator_out1;



  assign Relational_Operator1_relop1 = Add_out1 == HDL_Counter_out1;



  assign Logical_Operator2_out1 = Relational_Operator1_relop1 & Logical_Operator3_out1;



  assign count = HDL_Counter_out1 + count_step;



  assign need_to_wrap = HDL_Counter_out1 == 14'b10010101011010;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (Logical_Operator_out1 == 1'b0 ? HDL_Counter_out1 :
              count_value);



  assign count_2 = (reset_1 == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter_process
      if (reset == 1'b1) begin
        HDL_Counter_out1 <= 14'b00000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter_out1 <= count_2;
        end
      end
    end



  assign Relational_Operator_relop1 = HDL_Counter_out1 < Add_out1;



  assign Logical_Operator4_out1 = Relational_Operator_relop1 | Logical_Operator2_out1;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay_out1 <= Logical_Operator4_out1;
        end
      end
    end



  assign Logical_Operator_out1 = valid & Delay_out1;



  assign Compare_To_Constant_out1 = HDL_Counter_out1 == 14'b00000000000000;



  assign Logical_Operator1_out1 = Logical_Operator_out1 & Compare_To_Constant_out1;



  assign sampleInParam = Logical_Operator1_out1;

  assign dataValid = Logical_Operator_out1;

  assign ready = Logical_Operator4_out1;

endmodule  // whdlOFDMTx_Generate_Transmitter_Ready

