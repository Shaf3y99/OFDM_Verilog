// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Multiplexer.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Multiplexer
// Source Path: whdlOFDMTx/Multiplexer
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Multiplexer
          (ss_re,
           ss_im,
           ssValid,
           rs,
           rsValid,
           pilot,
           pilotValid,
           header_re,
           header_im,
           headerValid,
           data_re,
           data_im,
           dataValid,
           preambleOut_re,
           preambleOut_im,
           preambleValid,
           dataOut_re,
           dataOut_im,
           validOut);


  input   signed [15:0] ss_re;  // sfix16_En14
  input   signed [15:0] ss_im;  // sfix16_En14
  input   ssValid;
  input   signed [15:0] rs;  // sfix16_En14
  input   rsValid;
  input   signed [15:0] pilot;  // sfix16_En14
  input   pilotValid;
  input   signed [15:0] header_re;  // sfix16_En14
  input   signed [15:0] header_im;  // sfix16_En14
  input   headerValid;
  input   signed [15:0] data_re;  // sfix16_En14
  input   signed [15:0] data_im;  // sfix16_En14
  input   dataValid;
  output  signed [15:0] preambleOut_re;  // sfix16_En14
  output  signed [15:0] preambleOut_im;  // sfix16_En14
  output  preambleValid;
  output  signed [15:0] dataOut_re;  // sfix16_En14
  output  signed [15:0] dataOut_im;  // sfix16_En14
  output  validOut;


  wire signed [15:0] Multiplex_Preamble_Signals_out1_re;  // sfix16_En14
  wire signed [15:0] Multiplex_Preamble_Signals_out1_im;  // sfix16_En14
  wire Multiplex_Preamble_Signals_out2;
  wire signed [15:0] Multiplex_Header_and_Data_Signals_out1_re;  // sfix16_En14
  wire signed [15:0] Multiplex_Header_and_Data_Signals_out1_im;  // sfix16_En14
  wire Multiplex_Header_and_Data_Signals_out2;


  whdlOFDMTx_Multiplex_Preamble_Signals u_Multiplex_Preamble_Signals (.ss_re(ss_re),  // sfix16_En14
                                                                      .ss_im(ss_im),  // sfix16_En14
                                                                      .ssValid(ssValid),
                                                                      .rs(rs),  // sfix16_En14
                                                                      .rsValid(rsValid),
                                                                      .pilot(pilot),  // sfix16_En14
                                                                      .pilotValid(pilotValid),
                                                                      .preambleOut_re(Multiplex_Preamble_Signals_out1_re),  // sfix16_En14
                                                                      .preambleOut_im(Multiplex_Preamble_Signals_out1_im),  // sfix16_En14
                                                                      .preambleValid(Multiplex_Preamble_Signals_out2)
                                                                      );

  assign preambleOut_re = Multiplex_Preamble_Signals_out1_re;

  assign preambleOut_im = Multiplex_Preamble_Signals_out1_im;

  assign preambleValid = Multiplex_Preamble_Signals_out2;

  whdlOFDMTx_Multiplex_Header_and_Data_Signals u_Multiplex_Header_and_Data_Signals (.header_re(header_re),  // sfix16_En14
                                                                                    .header_im(header_im),  // sfix16_En14
                                                                                    .headerValid(headerValid),
                                                                                    .data_re(data_re),  // sfix16_En14
                                                                                    .data_im(data_im),  // sfix16_En14
                                                                                    .dataValid(dataValid),
                                                                                    .dataOut_re(Multiplex_Header_and_Data_Signals_out1_re),  // sfix16_En14
                                                                                    .dataOut_im(Multiplex_Header_and_Data_Signals_out1_im),  // sfix16_En14
                                                                                    .validOut(Multiplex_Header_and_Data_Signals_out2)
                                                                                    );

  assign dataOut_re = Multiplex_Header_and_Data_Signals_out1_re;

  assign dataOut_im = Multiplex_Header_and_Data_Signals_out1_im;

  assign validOut = Multiplex_Header_and_Data_Signals_out2;

endmodule  // whdlOFDMTx_Multiplexer

