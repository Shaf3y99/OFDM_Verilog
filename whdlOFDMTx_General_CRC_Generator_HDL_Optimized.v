// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_General_CRC_Generator_HDL_Optimized.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_General_CRC_Generator_HDL_Optimized
// Source Path: whdlOFDMTx/Frame Generator/Data/Data Chain/General CRC Generator HDL Optimized
// Hierarchy Level: 5
// 
// CRC Generator HDL Optimized
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_General_CRC_Generator_HDL_Optimized
          (clk,
           reset,
           enb_1_2_0,
           dataIn,
           startIn,
           endIn,
           validIn,
           dataOut,
           startOut,
           endOut,
           validOut);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   dataIn;
  input   startIn;
  input   endIn;
  input   validIn;
  output  dataOut;
  output  startOut;
  output  endOut;
  output  validOut;


  wire startIn_vld;
  wire endIn_vld;
  wire tstartout;
  wire processMsg;
  wire padZero;
  wire outputCRC;
  wire lastfout;
  wire validdata;
  wire [4:0] counter;  // ufix5
  wire [4:0] counter_opcrc;  // ufix5
  wire const0;  // ufix1
  wire msgenb;
  reg  datainReg;
  reg  [0:31] alpha_reg;  // ufix1 [32]
  wire [0:31] alpha_reg_next;  // ufix1 [32]
  wire dataBuffer;  // ufix1
  wire crcCheckSum_0;
  wire crcCheckSum_1;
  wire crcCheckSum_2;
  wire crcCheckSum_3;
  wire crcCheckSum_4;
  wire crcCheckSum_5;
  wire crcCheckSum_6;
  wire crcCheckSum_7;
  wire crcCheckSum_8;
  wire crcCheckSum_9;
  wire crcCheckSum_10;
  wire crcCheckSum_11;
  wire crcCheckSum_12;
  wire crcCheckSum_13;
  wire crcCheckSum_14;
  wire crcCheckSum_15;
  wire crcCheckSum_16;
  wire crcCheckSum_17;
  wire crcCheckSum_18;
  wire crcCheckSum_19;
  wire crcCheckSum_20;
  wire crcCheckSum_21;
  wire crcCheckSum_22;
  wire crcCheckSum_23;
  wire crcCheckSum_24;
  wire crcCheckSum_25;
  wire crcCheckSum_26;
  wire crcCheckSum_27;
  wire crcCheckSum_28;
  wire crcCheckSum_29;
  wire crcCheckSum_30;
  wire crcCheckSum_31;
  wire crcOut;  // ufix1
  wire msgcrc;  // ufix1
  wire tdataout;  // ufix1
  reg  dataOut_1;
  reg  startOut_1;
  reg  endOut_1;
  reg  validOut_1;


  assign startIn_vld = startIn & validIn;



  assign endIn_vld = endIn & validIn;



  whdlOFDMTx_CRCGenControl u_Controlsignal_inst (.clk(clk),
                                                 .reset(reset),
                                                 .enb_1_2_0(enb_1_2_0),
                                                 .startIn(startIn_vld),
                                                 .endIn(endIn_vld),
                                                 .validIn(validIn),
                                                 .startOut(tstartout),
                                                 .processMsg(processMsg),
                                                 .padZero(padZero),
                                                 .outputCRC(outputCRC),
                                                 .endOut(lastfout),
                                                 .validOut(validdata),
                                                 .counter(counter),  // ufix5
                                                 .counter_outputCRC(counter_opcrc)  // ufix5
                                                 );

  // Constant Zero
  assign const0 = 1'b0;



  assign msgenb = processMsg | padZero;



  always @(posedge clk or posedge reset)
    begin : datainput_register_process
      if (reset == 1'b1) begin
        datainReg <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          datainReg <= dataIn;
        end
      end
    end



  // Buffer Input Data
  always @(posedge clk or posedge reset)
    begin : c_process
      if (reset == 1'b1) begin
        alpha_reg[0] <= 1'b0;
        alpha_reg[1] <= 1'b0;
        alpha_reg[2] <= 1'b0;
        alpha_reg[3] <= 1'b0;
        alpha_reg[4] <= 1'b0;
        alpha_reg[5] <= 1'b0;
        alpha_reg[6] <= 1'b0;
        alpha_reg[7] <= 1'b0;
        alpha_reg[8] <= 1'b0;
        alpha_reg[9] <= 1'b0;
        alpha_reg[10] <= 1'b0;
        alpha_reg[11] <= 1'b0;
        alpha_reg[12] <= 1'b0;
        alpha_reg[13] <= 1'b0;
        alpha_reg[14] <= 1'b0;
        alpha_reg[15] <= 1'b0;
        alpha_reg[16] <= 1'b0;
        alpha_reg[17] <= 1'b0;
        alpha_reg[18] <= 1'b0;
        alpha_reg[19] <= 1'b0;
        alpha_reg[20] <= 1'b0;
        alpha_reg[21] <= 1'b0;
        alpha_reg[22] <= 1'b0;
        alpha_reg[23] <= 1'b0;
        alpha_reg[24] <= 1'b0;
        alpha_reg[25] <= 1'b0;
        alpha_reg[26] <= 1'b0;
        alpha_reg[27] <= 1'b0;
        alpha_reg[28] <= 1'b0;
        alpha_reg[29] <= 1'b0;
        alpha_reg[30] <= 1'b0;
        alpha_reg[31] <= 1'b0;
      end
      else begin
        if (enb_1_2_0 && msgenb) begin
          alpha_reg[0] <= alpha_reg_next[0];
          alpha_reg[1] <= alpha_reg_next[1];
          alpha_reg[2] <= alpha_reg_next[2];
          alpha_reg[3] <= alpha_reg_next[3];
          alpha_reg[4] <= alpha_reg_next[4];
          alpha_reg[5] <= alpha_reg_next[5];
          alpha_reg[6] <= alpha_reg_next[6];
          alpha_reg[7] <= alpha_reg_next[7];
          alpha_reg[8] <= alpha_reg_next[8];
          alpha_reg[9] <= alpha_reg_next[9];
          alpha_reg[10] <= alpha_reg_next[10];
          alpha_reg[11] <= alpha_reg_next[11];
          alpha_reg[12] <= alpha_reg_next[12];
          alpha_reg[13] <= alpha_reg_next[13];
          alpha_reg[14] <= alpha_reg_next[14];
          alpha_reg[15] <= alpha_reg_next[15];
          alpha_reg[16] <= alpha_reg_next[16];
          alpha_reg[17] <= alpha_reg_next[17];
          alpha_reg[18] <= alpha_reg_next[18];
          alpha_reg[19] <= alpha_reg_next[19];
          alpha_reg[20] <= alpha_reg_next[20];
          alpha_reg[21] <= alpha_reg_next[21];
          alpha_reg[22] <= alpha_reg_next[22];
          alpha_reg[23] <= alpha_reg_next[23];
          alpha_reg[24] <= alpha_reg_next[24];
          alpha_reg[25] <= alpha_reg_next[25];
          alpha_reg[26] <= alpha_reg_next[26];
          alpha_reg[27] <= alpha_reg_next[27];
          alpha_reg[28] <= alpha_reg_next[28];
          alpha_reg[29] <= alpha_reg_next[29];
          alpha_reg[30] <= alpha_reg_next[30];
          alpha_reg[31] <= alpha_reg_next[31];
        end
      end
    end

  assign dataBuffer = alpha_reg[31];
  assign alpha_reg_next[0] = datainReg;
  assign alpha_reg_next[1] = alpha_reg[0];
  assign alpha_reg_next[2] = alpha_reg[1];
  assign alpha_reg_next[3] = alpha_reg[2];
  assign alpha_reg_next[4] = alpha_reg[3];
  assign alpha_reg_next[5] = alpha_reg[4];
  assign alpha_reg_next[6] = alpha_reg[5];
  assign alpha_reg_next[7] = alpha_reg[6];
  assign alpha_reg_next[8] = alpha_reg[7];
  assign alpha_reg_next[9] = alpha_reg[8];
  assign alpha_reg_next[10] = alpha_reg[9];
  assign alpha_reg_next[11] = alpha_reg[10];
  assign alpha_reg_next[12] = alpha_reg[11];
  assign alpha_reg_next[13] = alpha_reg[12];
  assign alpha_reg_next[14] = alpha_reg[13];
  assign alpha_reg_next[15] = alpha_reg[14];
  assign alpha_reg_next[16] = alpha_reg[15];
  assign alpha_reg_next[17] = alpha_reg[16];
  assign alpha_reg_next[18] = alpha_reg[17];
  assign alpha_reg_next[19] = alpha_reg[18];
  assign alpha_reg_next[20] = alpha_reg[19];
  assign alpha_reg_next[21] = alpha_reg[20];
  assign alpha_reg_next[22] = alpha_reg[21];
  assign alpha_reg_next[23] = alpha_reg[22];
  assign alpha_reg_next[24] = alpha_reg[23];
  assign alpha_reg_next[25] = alpha_reg[24];
  assign alpha_reg_next[26] = alpha_reg[25];
  assign alpha_reg_next[27] = alpha_reg[26];
  assign alpha_reg_next[28] = alpha_reg[27];
  assign alpha_reg_next[29] = alpha_reg[28];
  assign alpha_reg_next[30] = alpha_reg[29];
  assign alpha_reg_next[31] = alpha_reg[30];



  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  // Select CRC output bits
  whdlOFDMTx_CRCGenCompute u_ComputeCRC_inst (.clk(clk),
                                              .reset(reset),
                                              .enb_1_2_0(enb_1_2_0),
                                              .datainReg(datainReg),
                                              .validIn(validIn),
                                              .processMsg(processMsg),
                                              .padZero(padZero),
                                              .counter(counter),  // ufix5
                                              .crcChecksum_0(crcCheckSum_0),
                                              .crcChecksum_1(crcCheckSum_1),
                                              .crcChecksum_2(crcCheckSum_2),
                                              .crcChecksum_3(crcCheckSum_3),
                                              .crcChecksum_4(crcCheckSum_4),
                                              .crcChecksum_5(crcCheckSum_5),
                                              .crcChecksum_6(crcCheckSum_6),
                                              .crcChecksum_7(crcCheckSum_7),
                                              .crcChecksum_8(crcCheckSum_8),
                                              .crcChecksum_9(crcCheckSum_9),
                                              .crcChecksum_10(crcCheckSum_10),
                                              .crcChecksum_11(crcCheckSum_11),
                                              .crcChecksum_12(crcCheckSum_12),
                                              .crcChecksum_13(crcCheckSum_13),
                                              .crcChecksum_14(crcCheckSum_14),
                                              .crcChecksum_15(crcCheckSum_15),
                                              .crcChecksum_16(crcCheckSum_16),
                                              .crcChecksum_17(crcCheckSum_17),
                                              .crcChecksum_18(crcCheckSum_18),
                                              .crcChecksum_19(crcCheckSum_19),
                                              .crcChecksum_20(crcCheckSum_20),
                                              .crcChecksum_21(crcCheckSum_21),
                                              .crcChecksum_22(crcCheckSum_22),
                                              .crcChecksum_23(crcCheckSum_23),
                                              .crcChecksum_24(crcCheckSum_24),
                                              .crcChecksum_25(crcCheckSum_25),
                                              .crcChecksum_26(crcCheckSum_26),
                                              .crcChecksum_27(crcCheckSum_27),
                                              .crcChecksum_28(crcCheckSum_28),
                                              .crcChecksum_29(crcCheckSum_29),
                                              .crcChecksum_30(crcCheckSum_30),
                                              .crcChecksum_31(crcCheckSum_31)
                                              );

  assign crcOut = (counter_opcrc == 5'b00000 ? crcCheckSum_0 :
              (counter_opcrc == 5'b00001 ? crcCheckSum_1 :
              (counter_opcrc == 5'b00010 ? crcCheckSum_2 :
              (counter_opcrc == 5'b00011 ? crcCheckSum_3 :
              (counter_opcrc == 5'b00100 ? crcCheckSum_4 :
              (counter_opcrc == 5'b00101 ? crcCheckSum_5 :
              (counter_opcrc == 5'b00110 ? crcCheckSum_6 :
              (counter_opcrc == 5'b00111 ? crcCheckSum_7 :
              (counter_opcrc == 5'b01000 ? crcCheckSum_8 :
              (counter_opcrc == 5'b01001 ? crcCheckSum_9 :
              (counter_opcrc == 5'b01010 ? crcCheckSum_10 :
              (counter_opcrc == 5'b01011 ? crcCheckSum_11 :
              (counter_opcrc == 5'b01100 ? crcCheckSum_12 :
              (counter_opcrc == 5'b01101 ? crcCheckSum_13 :
              (counter_opcrc == 5'b01110 ? crcCheckSum_14 :
              (counter_opcrc == 5'b01111 ? crcCheckSum_15 :
              (counter_opcrc == 5'b10000 ? crcCheckSum_16 :
              (counter_opcrc == 5'b10001 ? crcCheckSum_17 :
              (counter_opcrc == 5'b10010 ? crcCheckSum_18 :
              (counter_opcrc == 5'b10011 ? crcCheckSum_19 :
              (counter_opcrc == 5'b10100 ? crcCheckSum_20 :
              (counter_opcrc == 5'b10101 ? crcCheckSum_21 :
              (counter_opcrc == 5'b10110 ? crcCheckSum_22 :
              (counter_opcrc == 5'b10111 ? crcCheckSum_23 :
              (counter_opcrc == 5'b11000 ? crcCheckSum_24 :
              (counter_opcrc == 5'b11001 ? crcCheckSum_25 :
              (counter_opcrc == 5'b11010 ? crcCheckSum_26 :
              (counter_opcrc == 5'b11011 ? crcCheckSum_27 :
              (counter_opcrc == 5'b11100 ? crcCheckSum_28 :
              (counter_opcrc == 5'b11101 ? crcCheckSum_29 :
              (counter_opcrc == 5'b11110 ? crcCheckSum_30 :
              crcCheckSum_31)))))))))))))))))))))))))))))));



  assign msgcrc = (outputCRC == 1'b0 ? dataBuffer :
              crcOut);



  // Output data and CRC CheckSum
  assign tdataout = (validdata == 1'b0 ? const0 :
              msgcrc);



  // Data output register
  always @(posedge clk or posedge reset)
    begin : dataOut_register_process
      if (reset == 1'b1) begin
        dataOut_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          dataOut_1 <= tdataout;
        end
      end
    end



  // startOut output register
  always @(posedge clk or posedge reset)
    begin : startOut_register_process
      if (reset == 1'b1) begin
        startOut_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          startOut_1 <= tstartout;
        end
      end
    end



  // endOut output register
  always @(posedge clk or posedge reset)
    begin : endout_register_process
      if (reset == 1'b1) begin
        endOut_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          endOut_1 <= lastfout;
        end
      end
    end



  // validOut output register
  always @(posedge clk or posedge reset)
    begin : validout_register_process
      if (reset == 1'b1) begin
        validOut_1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          validOut_1 <= validdata;
        end
      end
    end



  assign dataOut = dataOut_1;

  assign startOut = startOut_1;

  assign endOut = endOut_1;

  assign validOut = validOut_1;

endmodule  // whdlOFDMTx_General_CRC_Generator_HDL_Optimized

