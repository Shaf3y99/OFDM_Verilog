// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\OFDM_Transmitter_tc.v
// Created: 2023-05-02 12:36:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: OFDM_Transmitter_tc
// Source Path: OFDM_Transmitter_tc
// Hierarchy Level: 1
// 
// Master clock enable input: clk_enable
// 
// enb         : identical to clk_enable
// enb_1_2_0   : 2x slower than clk with last phase
// enb_1_2_1   : 2x slower than clk with phase 1
// enb_1_32_0  : 32x slower than clk with last phase
// enb_1_32_1  : 32x slower than clk with phase 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module OFDM_Transmitter_tc
          (clk,
           reset,
           clk_enable,
           enb,
           enb_1_2_0,
           enb_1_2_1,
           enb_1_32_0,
           enb_1_32_1);


  input   clk;
  input   reset;
  input   clk_enable;
  output  enb;
  output  enb_1_2_0;
  output  enb_1_2_1;
  output  enb_1_32_0;
  output  enb_1_32_1;


  reg  count2;  // ufix1
  wire comp_0_tmp;
  wire phase_0_tmp;
  reg  phase_0;
  wire enb_1_2_0_1;
  wire comp_1_tmp;
  wire phase_1_tmp;
  reg  phase_1;
  wire enb_1_2_1_1;
  reg [4:0] count32;  // ufix5
  wire comp_0_tmp_1;
  wire phase_0_tmp_1;
  reg  phase_0_1;
  wire enb_1_32_0_1;
  wire comp_1_tmp_1;
  wire phase_1_tmp_1;
  reg  phase_1_1;
  wire enb_1_32_1_1;


  assign enb = clk_enable;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 1
  always @(posedge clk or posedge reset)
    begin : counter_2_process
      if (reset == 1'b1) begin
        count2 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          count2 <=  ~ count2;
        end
      end
    end



  assign comp_0_tmp = count2 == 1'b1;



  assign phase_0_tmp = comp_0_tmp & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_process
      if (reset == 1'b1) begin
        phase_0 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0 <= phase_0_tmp;
        end
      end
    end



  assign enb_1_2_0_1 = phase_0 & clk_enable;



  assign enb_1_2_0 = enb_1_2_0_1;

  assign comp_1_tmp = count2 == 1'b0;



  assign phase_1_tmp = comp_1_tmp & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_1_process
      if (reset == 1'b1) begin
        phase_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1 <= phase_1_tmp;
        end
      end
    end



  assign enb_1_2_1_1 = phase_1 & clk_enable;



  assign enb_1_2_1 = enb_1_2_1_1;

  // Count limited, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  //  count to value  = 31
  always @(posedge clk or posedge reset)
    begin : counter_32_process
      if (reset == 1'b1) begin
        count32 <= 5'b00001;
      end
      else begin
        if (clk_enable) begin
          count32 <= count32 + 5'b00001;
        end
      end
    end



  assign comp_0_tmp_1 = count32 == 5'b11111;



  assign phase_0_tmp_1 = comp_0_tmp_1 & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_2_process
      if (reset == 1'b1) begin
        phase_0_1 <= 1'b0;
      end
      else begin
        if (clk_enable) begin
          phase_0_1 <= phase_0_tmp_1;
        end
      end
    end



  assign enb_1_32_0_1 = phase_0_1 & clk_enable;



  assign enb_1_32_0 = enb_1_32_0_1;

  assign comp_1_tmp_1 = count32 == 5'b00000;



  assign phase_1_tmp_1 = comp_1_tmp_1 & clk_enable;



  always @(posedge clk or posedge reset)
    begin : phase_delay_3_process
      if (reset == 1'b1) begin
        phase_1_1 <= 1'b1;
      end
      else begin
        if (clk_enable) begin
          phase_1_1 <= phase_1_tmp_1;
        end
      end
    end



  assign enb_1_32_1_1 = phase_1_1 & clk_enable;



  assign enb_1_32_1 = enb_1_32_1_1;

endmodule  // OFDM_Transmitter_tc

