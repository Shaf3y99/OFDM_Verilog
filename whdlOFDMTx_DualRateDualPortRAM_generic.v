// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_DualRateDualPortRAM_generic.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_DualRateDualPortRAM_generic
// Source Path: whdlOFDMTx/Frame Formation and OFDM Modulation/DualRateDualPortRAM_generic
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_DualRateDualPortRAM_generic
          (clk,
           enb_1_32_0,
           enb,
           din_A_re,
           din_A_im,
           addr_A,
           we_A,
           din_B_re,
           din_B_im,
           addr_B,
           we_B,
           doutA_re,
           doutA_im,
           doutB_re,
           doutB_im);

  parameter integer AddrWidth  = 1;
  parameter integer DataWidth  = 1;

  input   clk;
  input   enb_1_32_0;
  input   enb;
  input   signed [DataWidth - 1:0] din_A_re;  // parameterized width
  input   signed [DataWidth - 1:0] din_A_im;  // parameterized width
  input   [AddrWidth - 1:0] addr_A;  // parameterized width
  input   we_A;  // ufix1
  input   signed [DataWidth - 1:0] din_B_re;  // parameterized width
  input   signed [DataWidth - 1:0] din_B_im;  // parameterized width
  input   [AddrWidth - 1:0] addr_B;  // parameterized width
  input   we_B;  // ufix1
  output  signed [DataWidth - 1:0] doutA_re;  // parameterized width
  output  signed [DataWidth - 1:0] doutA_im;  // parameterized width
  output  signed [DataWidth - 1:0] doutB_re;  // parameterized width
  output  signed [DataWidth - 1:0] doutB_im;  // parameterized width


  reg  [DataWidth*2 - 1:0] ram [2**AddrWidth - 1:0];
  reg  [DataWidth*2 - 1:0] dout_a;
  reg  [DataWidth*2 - 1:0] dout_b;
  integer i;

  initial begin
    for (i=0; i<=2**AddrWidth - 1; i=i+1) begin
      ram[i] = 0;
    end
    dout_a = 0;
    dout_b = 0;
  end


  always @(posedge clk)
    begin : DualRateDualPortRAM_generic_processA
      if (enb == 1'b1) begin
        if (we_A == 1'b1) begin
          ram[addr_A] <= {din_A_re, din_A_im};
          dout_a <= {din_A_re, din_A_im};
        end
        else begin
          dout_a <= ram[addr_A];
        end
      end
    end

  always @(posedge clk)
    begin : DualRateDualPortRAM_generic_processB
      if (enb_1_32_0 == 1'b1) begin
        if (we_B == 1'b1) begin
          ram[addr_B] <= {din_B_re, din_B_im};
          dout_b <= {din_B_re, din_B_im};
        end
        else begin
          dout_b <= ram[addr_B];
        end
      end
    end

  assign doutA_re = dout_a[DataWidth*2-1:DataWidth];
  assign doutA_im = dout_a[DataWidth-1:0];
  assign doutB_re = dout_b[DataWidth*2-1:DataWidth];
  assign doutB_im = dout_b[DataWidth-1:0];

endmodule  // whdlOFDMTx_DualRateDualPortRAM_generic

