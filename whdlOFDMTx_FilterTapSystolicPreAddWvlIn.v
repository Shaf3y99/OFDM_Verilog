// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_FilterTapSystolicPreAddWvlIn.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_FilterTapSystolicPreAddWvlIn
// Source Path: whdlOFDMTx/Discrete FIR Filter/Filter/subFilter/FilterTapSystolicPreAddWvlIn
// Hierarchy Level: 5
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_FilterTapSystolicPreAddWvlIn
          (clk,
           enb_1_32_0,
           dinReg2_0_re,
           dinPreAdd,
           coefIn_0,
           addin,
           dinRegVld,
           syncReset,
           dinDly2,
           tapout);


  input   clk;
  input   enb_1_32_0;
  input   signed [15:0] dinReg2_0_re;  // sfix16_En14
  input   signed [15:0] dinPreAdd;  // sfix16_En14
  input   signed [15:0] coefIn_0;  // sfix16_En15
  input   signed [31:0] addin;  // sfix32_En29
  input   dinRegVld;
  input   syncReset;
  output  signed [15:0] dinDly2;  // sfix16_En14
  output  signed [31:0] tapout;  // sfix32_En29


  reg signed [32:0] fTap_mult_reg;  // sfix33
  reg signed [15:0] fTap_din1_reg1;  // sfix16
  reg signed [15:0] fTap_din1_reg2;  // sfix16
  reg signed [15:0] fTap_din2_reg1;  // sfix16
  reg signed [16:0] fTap_preAdd_reg;  // sfix17
  reg signed [31:0] fTap_addout_reg;  // sfix32
  reg signed [15:0] fTap_coef_reg1;  // sfix16
  reg signed [15:0] fTap_coef_reg2;  // sfix16
  reg signed [32:0] fTap_mult_reg_next;  // sfix33_En29
  reg signed [15:0] fTap_din1_reg1_next;  // sfix16_En14
  reg signed [15:0] fTap_din1_reg2_next;  // sfix16_En14
  reg signed [15:0] fTap_din2_reg1_next;  // sfix16_En14
  reg signed [16:0] fTap_preAdd_reg_next;  // sfix17_En14
  reg signed [31:0] fTap_addout_reg_next;  // sfix32_En29
  reg signed [15:0] fTap_coef_reg1_next;  // sfix16_En15
  reg signed [15:0] fTap_coef_reg2_next;  // sfix16_En15
  reg signed [15:0] dinDly2_1;  // sfix16_En14
  reg signed [31:0] tapout_1;  // sfix32_En29
  reg signed [31:0] fTap_add_cast;  // sfix32_En29
  reg signed [16:0] fTap_add_cast_0;  // sfix17_En14
  reg signed [16:0] fTap_add_cast_1;  // sfix17_En14

  initial begin
    fTap_din1_reg1 = 16'sb0000000000000000;
    fTap_din1_reg2 = 16'sb0000000000000000;
    fTap_din2_reg1 = 16'sb0000000000000000;
    fTap_preAdd_reg = 17'sb00000000000000000;
    fTap_coef_reg1 = 16'sb0000000000000000;
    fTap_coef_reg2 = 16'sb0000000000000000;
    fTap_mult_reg = 33'sh000000000;
    fTap_addout_reg = 32'sb00000000000000000000000000000000;
  end

  // FilterTapSystolicPreAddWvldIn
  always @(posedge clk)
    begin : fTap_process
      if (enb_1_32_0) begin
        if (syncReset == 1'b1) begin
          fTap_din1_reg1 <= 16'sb0000000000000000;
          fTap_din1_reg2 <= 16'sb0000000000000000;
          fTap_din2_reg1 <= 16'sb0000000000000000;
          fTap_preAdd_reg <= 17'sb00000000000000000;
          fTap_coef_reg1 <= 16'sb0000000000000000;
          fTap_coef_reg2 <= 16'sb0000000000000000;
          fTap_mult_reg <= 33'sh000000000;
          fTap_addout_reg <= 32'sb00000000000000000000000000000000;
        end
        else begin
          fTap_mult_reg <= fTap_mult_reg_next;
          fTap_din1_reg1 <= fTap_din1_reg1_next;
          fTap_din1_reg2 <= fTap_din1_reg2_next;
          fTap_din2_reg1 <= fTap_din2_reg1_next;
          fTap_preAdd_reg <= fTap_preAdd_reg_next;
          fTap_addout_reg <= fTap_addout_reg_next;
          fTap_coef_reg1 <= fTap_coef_reg1_next;
          fTap_coef_reg2 <= fTap_coef_reg2_next;
        end
      end
    end

  always @(addin, coefIn_0, dinPreAdd, dinReg2_0_re, dinRegVld, fTap_addout_reg,
       fTap_coef_reg1, fTap_coef_reg2, fTap_din1_reg1, fTap_din1_reg2,
       fTap_din2_reg1, fTap_mult_reg, fTap_preAdd_reg) begin
    fTap_add_cast = 32'sb00000000000000000000000000000000;
    fTap_add_cast_0 = 17'sb00000000000000000;
    fTap_add_cast_1 = 17'sb00000000000000000;
    fTap_mult_reg_next = fTap_mult_reg;
    fTap_din1_reg1_next = fTap_din1_reg1;
    fTap_din1_reg2_next = fTap_din1_reg2;
    fTap_din2_reg1_next = fTap_din2_reg1;
    fTap_preAdd_reg_next = fTap_preAdd_reg;
    fTap_addout_reg_next = fTap_addout_reg;
    fTap_coef_reg1_next = fTap_coef_reg1;
    fTap_coef_reg2_next = fTap_coef_reg2;
    if (dinRegVld) begin
      fTap_add_cast = fTap_mult_reg[31:0];
      fTap_addout_reg_next = fTap_add_cast + addin;
      fTap_mult_reg_next = fTap_preAdd_reg * fTap_coef_reg2;
      fTap_add_cast_0 = {fTap_din1_reg2[15], fTap_din1_reg2};
      fTap_add_cast_1 = {fTap_din2_reg1[15], fTap_din2_reg1};
      fTap_preAdd_reg_next = fTap_add_cast_0 + fTap_add_cast_1;
      fTap_din1_reg2_next = fTap_din1_reg1;
      fTap_din1_reg1_next = dinReg2_0_re;
      fTap_din2_reg1_next = dinPreAdd;
      fTap_coef_reg2_next = fTap_coef_reg1;
      fTap_coef_reg1_next = coefIn_0;
    end
    dinDly2_1 = fTap_din1_reg2;
    tapout_1 = fTap_addout_reg;
  end



  assign dinDly2 = dinDly2_1;

  assign tapout = tapout_1;

endmodule  // whdlOFDMTx_FilterTapSystolicPreAddWvlIn

