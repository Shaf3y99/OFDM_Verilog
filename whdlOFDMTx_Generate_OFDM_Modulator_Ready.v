// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Generate_OFDM_Modulator_Ready.v
// Created: 2023-05-02 12:36:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Generate_OFDM_Modulator_Ready
// Source Path: whdlOFDMTx/Frame Controller and Input Sampler/Frame Controller/Generate OFDM Modulator Ready
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Generate_OFDM_Modulator_Ready
          (clk,
           reset,
           enb_1_2_0,
           ready,
           trBlkSize,
           resetRAM,
           dataSet,
           ofdmModReady,
           reset_1);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   ready;
  input   [13:0] trBlkSize;  // ufix14
  output  resetRAM;
  output  dataSet;
  output  ofdmModReady;
  output  reset_1;


  wire Logical_Operator_out1;
  wire [16:0] count_step;  // ufix17
  wire [16:0] count_from;  // ufix17
  wire [16:0] count_reset;  // ufix17
  reg [16:0] HDL_Counter1_out1;  // ufix17
  wire [16:0] count;  // ufix17
  wire need_to_wrap;
  wire [16:0] count_value;  // ufix17
  wire Rising_Edge_Detector_out1;
  wire out;
  wire [16:0] count_1;  // ufix17
  wire [16:0] count_2;  // ufix17
  wire Compare_To_Constant1_out1;
  reg  Delay1_out1;
  wire Control_OFDM_Signal_Generation_out1;
  wire Logical_Operator7_out1;
  wire Constant_out1;  // ufix1
  wire signed [14:0] Add_sub_temp;  // sfix15
  wire signed [14:0] Add_1;  // sfix15
  wire signed [14:0] Add_2;  // sfix15
  wire [13:0] Add_out1;  // ufix14
  wire [16:0] Relational_Operator3_1_1;  // ufix17
  wire Relational_Operator3_relop1;
  wire Logical_Operator5_out1;


  assign Logical_Operator_out1 =  ~ ready;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 92160
  assign count_step = 17'b00000000000000001;



  assign count_from = 17'b00000000000000000;



  assign count_reset = 17'b00000000000000000;



  assign count = HDL_Counter1_out1 + count_step;



  assign need_to_wrap = HDL_Counter1_out1 == 17'b10110100000000000;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  whdlOFDMTx_MATLAB_Function1 u_MATLAB_Function1 (.clk(clk),
                                                  .reset(reset),
                                                  .enb_1_2_0(enb_1_2_0),
                                                  .trigger(Rising_Edge_Detector_out1),
                                                  .out(out)
                                                  );

  assign count_1 = (out == 1'b0 ? HDL_Counter1_out1 :
              count_value);



  assign count_2 = (Rising_Edge_Detector_out1 == 1'b0 ? count_1 :
              count_reset);



  always @(posedge clk or posedge reset)
    begin : HDL_Counter1_process
      if (reset == 1'b1) begin
        HDL_Counter1_out1 <= 17'b00000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          HDL_Counter1_out1 <= count_2;
        end
      end
    end



  assign Compare_To_Constant1_out1 = HDL_Counter1_out1 == 17'b10100001010100010;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay1_out1 <= Compare_To_Constant1_out1;
        end
      end
    end



  whdlOFDMTx_Control_OFDM_Signal_Generation u_Control_OFDM_Signal_Generation (.clk(clk),
                                                                              .reset(reset),
                                                                              .enb_1_2_0(enb_1_2_0),
                                                                              .readyLow(Logical_Operator_out1),
                                                                              .reset_1(Delay1_out1),
                                                                              .holdOFDMGen(Control_OFDM_Signal_Generation_out1)
                                                                              );

  assign Logical_Operator7_out1 = Logical_Operator_out1 & Control_OFDM_Signal_Generation_out1;



  whdlOFDMTx_Rising_Edge_Detector u_Rising_Edge_Detector (.clk(clk),
                                                          .reset(reset),
                                                          .enb_1_2_0(enb_1_2_0),
                                                          .in(Logical_Operator7_out1),
                                                          .out(Rising_Edge_Detector_out1)
                                                          );

  assign resetRAM = Rising_Edge_Detector_out1;

  assign Constant_out1 = 1'b1;



  assign Add_1 = {1'b0, trBlkSize};
  assign Add_2 = {14'b0, Constant_out1};
  assign Add_sub_temp = Add_1 - Add_2;
  assign Add_out1 = Add_sub_temp[13:0];



  assign Relational_Operator3_1_1 = {3'b0, Add_out1};
  assign Relational_Operator3_relop1 = HDL_Counter1_out1 <= Relational_Operator3_1_1;



  assign Logical_Operator5_out1 = out & Relational_Operator3_relop1;



  assign dataSet = Logical_Operator5_out1;

  assign ofdmModReady = out;

  assign reset_1 = Compare_To_Constant1_out1;

endmodule  // whdlOFDMTx_Generate_OFDM_Modulator_Ready

