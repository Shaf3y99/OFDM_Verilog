// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Data_Chain.v
// Created: 2023-05-02 12:36:37
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Data_Chain
// Source Path: whdlOFDMTx/Frame Generator/Data/Data Chain
// Hierarchy Level: 4
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Data_Chain
          (clk,
           reset,
           enb,
           enb_1_2_0,
           dataIn,
           startIn,
           endIn,
           validIn,
           puncVector_0,
           puncVector_1,
           puncVector_2,
           puncVector_3,
           puncVector_4,
           puncVector_5,
           puncVector_6,
           puncVector_7,
           puncVector_8,
           puncVector_9,
           modTypeInd,
           loadModulator,
           data_re,
           data_im,
           valid);


  input   clk;
  input   reset;
  input   enb;
  input   enb_1_2_0;
  input   dataIn;
  input   startIn;
  input   endIn;
  input   validIn;
  input   puncVector_0;  // boolean
  input   puncVector_1;  // boolean
  input   puncVector_2;  // boolean
  input   puncVector_3;  // boolean
  input   puncVector_4;  // boolean
  input   puncVector_5;  // boolean
  input   puncVector_6;  // boolean
  input   puncVector_7;  // boolean
  input   puncVector_8;  // boolean
  input   puncVector_9;  // boolean
  input   [1:0] modTypeInd;  // ufix2
  input   loadModulator;
  output  signed [15:0] data_re;  // sfix16_En14
  output  signed [15:0] data_im;  // sfix16_En14
  output  valid;


  wire General_CRC_Generator_HDL_Optimized_out1;
  wire General_CRC_Generator_HDL_Optimized_out2;
  wire General_CRC_Generator_HDL_Optimized_out3;
  wire General_CRC_Generator_HDL_Optimized_out4;
  wire Scrambler_out1;
  wire Scrambler_out2;
  wire Scrambler_out3;
  wire Scrambler_out4;
  wire Create_Control_Bus_out1;
  wire Create_Control_Bus_out2_start;
  wire Create_Control_Bus_out2_end;
  wire Create_Control_Bus_out2_valid;
  wire Convolutional_Encoder_out1_0;
  wire Convolutional_Encoder_out1_1;
  wire Convolutional_Encoder_out2_start;
  wire Convolutional_Encoder_out2_end;
  wire Convolutional_Encoder_out2_valid;
  wire data_0;
  wire data_1;
  wire ctrl_start;
  wire ctrl_end;
  wire ctrl_valid;
  wire valid_1;
  wire control_in_2;
  reg  Serializer1D_contl_cnt;  // ufix1
  wire Serializer1D_contl_cnt_next;  // ufix1
  wire [1:0] Serializer1D_contl_add_temp;  // ufix2
  wire [1:0] Serializer1D_contl_1;  // ufix2
  wire Serializer1D_invldSignal;
  wire Serializer1D_out2;
  wire [0:1] serial_in_1;  // boolean [2]
  reg  Serializer1D_data;  // ufix1
  wire serializer_PostProcessed;
  wire [2:0] Data_Type_Conversion_out1;  // ufix3
  reg [2:0] Delay4_out1;  // ufix3
  wire [2:0] Repeat_out1;  // ufix3
  wire Symbol_Interleaver_out1;
  wire Symbol_Interleaver_out2;
  reg  Upsample1_muxsel;  // ufix1
  reg  Delay1_out1;
  wire Upsample1_zero;
  wire Upsample1_out1;
  wire signed [15:0] data_re_1;  // sfix16_En14
  wire signed [15:0] data_im_1;  // sfix16_En14
  wire valid_2;
  reg signed [15:0] Delay2_out1_re;  // sfix16_En14
  reg signed [15:0] Delay2_out1_im;  // sfix16_En14
  reg  Delay3_out1;

  // This subsystem shows the input payload data processed through Data Chain. Puncturer and Symbol Modulator blocks 
  // control the effective data rate


  whdlOFDMTx_General_CRC_Generator_HDL_Optimized u_General_CRC_Generator_HDL_Optimized (.clk(clk),
                                                                                        .reset(reset),
                                                                                        .enb_1_2_0(enb_1_2_0),
                                                                                        .dataIn(dataIn),
                                                                                        .startIn(startIn),
                                                                                        .endIn(endIn),
                                                                                        .validIn(validIn),
                                                                                        .dataOut(General_CRC_Generator_HDL_Optimized_out1),
                                                                                        .startOut(General_CRC_Generator_HDL_Optimized_out2),
                                                                                        .endOut(General_CRC_Generator_HDL_Optimized_out3),
                                                                                        .validOut(General_CRC_Generator_HDL_Optimized_out4)
                                                                                        );

  whdlOFDMTx_Scrambler u_Scrambler (.clk(clk),
                                    .reset(reset),
                                    .enb_1_2_0(enb_1_2_0),
                                    .dataIn(General_CRC_Generator_HDL_Optimized_out1),
                                    .startIn(General_CRC_Generator_HDL_Optimized_out2),
                                    .endIn(General_CRC_Generator_HDL_Optimized_out3),
                                    .validIn(General_CRC_Generator_HDL_Optimized_out4),
                                    .dataOut(Scrambler_out1),
                                    .startOut(Scrambler_out2),
                                    .endOut(Scrambler_out3),
                                    .validOut(Scrambler_out4)
                                    );

  whdlOFDMTx_Create_Control_Bus u_Create_Control_Bus (.dataIn(Scrambler_out1),
                                                      .startIn(Scrambler_out2),
                                                      .endIn(Scrambler_out3),
                                                      .validIn(Scrambler_out4),
                                                      .dataOut(Create_Control_Bus_out1),
                                                      .ctrlOut_start(Create_Control_Bus_out2_start),
                                                      .ctrlOut_end(Create_Control_Bus_out2_end),
                                                      .ctrlOut_valid(Create_Control_Bus_out2_valid)
                                                      );

  whdlOFDMTx_Convolutional_Encoder u_Convolutional_Encoder (.clk(clk),
                                                            .reset(reset),
                                                            .enb_1_2_0(enb_1_2_0),
                                                            .in0(Create_Control_Bus_out1),
                                                            .in1_start(Create_Control_Bus_out2_start),
                                                            .in1_end(Create_Control_Bus_out2_end),
                                                            .in1_valid(Create_Control_Bus_out2_valid),
                                                            .out0_0(Convolutional_Encoder_out1_0),
                                                            .out0_1(Convolutional_Encoder_out1_1),
                                                            .out1_start(Convolutional_Encoder_out2_start),
                                                            .out1_end(Convolutional_Encoder_out2_end),
                                                            .out1_valid(Convolutional_Encoder_out2_valid)
                                                            );

  whdlOFDMTx_Puncturer u_Puncturer (.clk(clk),
                                    .reset(reset),
                                    .enb_1_2_0(enb_1_2_0),
                                    .data_0(Convolutional_Encoder_out1_0),
                                    .data_1(Convolutional_Encoder_out1_1),
                                    .puncVector_0(puncVector_0),
                                    .puncVector_1(puncVector_1),
                                    .puncVector_2(puncVector_2),
                                    .puncVector_3(puncVector_3),
                                    .puncVector_4(puncVector_4),
                                    .puncVector_5(puncVector_5),
                                    .puncVector_6(puncVector_6),
                                    .puncVector_7(puncVector_7),
                                    .puncVector_8(puncVector_8),
                                    .puncVector_9(puncVector_9),
                                    .ctrl_start(Convolutional_Encoder_out2_start),
                                    .ctrl_end(Convolutional_Encoder_out2_end),
                                    .ctrl_valid(Convolutional_Encoder_out2_valid),
                                    .data1_0(data_0),
                                    .data1_1(data_1),
                                    .ctrl1_valid(ctrl_valid)
                                    );

  assign valid_1 = ctrl_valid;

  assign control_in_2 = valid_1;

  always @(posedge clk or posedge reset)
    begin : Serializer1D_contl_process
      if (reset == 1'b1) begin
        Serializer1D_contl_cnt <= 1'b0;
      end
      else begin
        if (enb) begin
          Serializer1D_contl_cnt <= Serializer1D_contl_cnt_next;
        end
      end
    end

  assign Serializer1D_out2 = control_in_2 != 1'b0;
  assign Serializer1D_contl_1 = {1'b0, Serializer1D_contl_cnt};
  assign Serializer1D_contl_add_temp = Serializer1D_contl_1 + 2'b01;
  assign Serializer1D_contl_cnt_next = (Serializer1D_contl_cnt == 1'b1 ? 1'b0 :
              Serializer1D_contl_add_temp[0]);
  assign Serializer1D_invldSignal = Serializer1D_contl_cnt == 1'b0;



  assign serial_in_1[0] = data_0;
  assign serial_in_1[1] = data_1;

  always @(posedge clk or posedge reset)
    begin : Serializer1D_process
      if (reset == 1'b1) begin
        Serializer1D_data <= 1'b0;
      end
      else begin
        if (enb) begin
          if (Serializer1D_invldSignal != 1'b0) begin
            Serializer1D_data <= serial_in_1[1];
          end
          else begin
            Serializer1D_data <= serial_in_1[1];
          end
        end
      end
    end

  assign serializer_PostProcessed = (Serializer1D_invldSignal != 1'b0 ? serial_in_1[0] :
              Serializer1D_data);



  assign Data_Type_Conversion_out1 = {1'b0, modTypeInd};



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 3'b000;
      end
      else begin
        if (enb_1_2_0) begin
          Delay4_out1 <= Data_Type_Conversion_out1;
        end
      end
    end



  assign Repeat_out1 = Delay4_out1;

  whdlOFDMTx_Symbol_Interleaver u_Symbol_Interleaver (.clk(clk),
                                                      .reset(reset),
                                                      .enb(enb),
                                                      .data(serializer_PostProcessed),
                                                      .valid(Serializer1D_out2),
                                                      .modTypeIndex(Repeat_out1),  // ufix3
                                                      .dataOut(Symbol_Interleaver_out1),
                                                      .validOut(Symbol_Interleaver_out2)
                                                      );

  // Free running, Unsigned Counter
  //  initial value   = 1
  //  step value      = 1
  // Upsample1: Upsample by 2, Sample offset 0 
  always @(posedge clk or posedge reset)
    begin : Upsample1_cnt_process
      if (reset == 1'b1) begin
        Upsample1_muxsel <= 1'b1;
      end
      else begin
        if (enb) begin
          Upsample1_muxsel <=  ~ Upsample1_muxsel;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b0;
      end
      else begin
        if (enb_1_2_0) begin
          Delay1_out1 <= loadModulator;
        end
      end
    end



  assign Upsample1_zero = 1'b0;



  assign Upsample1_out1 = (Upsample1_muxsel == 1'b1 ? Delay1_out1 :
              Upsample1_zero);



  whdlOFDMTx_LTE_Symbol_Modulator u_LTE_Symbol_Modulator (.clk(clk),
                                                          .reset(reset),
                                                          .enb(enb),
                                                          .data(Symbol_Interleaver_out1),
                                                          .valid(Symbol_Interleaver_out2),
                                                          .modSel(Repeat_out1),  // ufix3
                                                          .load(Upsample1_out1),
                                                          .data1_re(data_re_1),  // sfix16_En14
                                                          .data1_im(data_im_1),  // sfix16_En14
                                                          .valid1(valid_2)
                                                          );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1_re <= 16'sb0000000000000000;
        Delay2_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_re <= data_re_1;
          Delay2_out1_im <= data_im_1;
        end
      end
    end



  assign data_re = Delay2_out1_re;

  assign data_im = Delay2_out1_im;

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= valid_2;
        end
      end
    end



  assign valid = Delay3_out1;

endmodule  // whdlOFDMTx_Data_Chain

