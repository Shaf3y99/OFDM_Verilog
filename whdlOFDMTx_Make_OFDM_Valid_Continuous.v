// -------------------------------------------------------------
// 
// File Name: D:\NU\OF\WHDLOFDMTransmitterExample_all_new\hdl_prj\hdlsrc3\whdlOFDMTransmitter_up_con\whdlOFDMTx\whdlOFDMTx_Make_OFDM_Valid_Continuous.v
// Created: 2023-05-02 12:36:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: whdlOFDMTx_Make_OFDM_Valid_Continuous
// Source Path: whdlOFDMTx/Frame Formation and OFDM Modulation/Make OFDM Valid Continuous
// Hierarchy Level: 3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module whdlOFDMTx_Make_OFDM_Valid_Continuous
          (clk,
           reset,
           enb_1_32_0,
           dataIn_re,
           dataIn_im,
           validIn,
           ofdmData_re,
           ofdmData_im,
           ofdmValid);


  input   clk;
  input   reset;
  input   enb_1_32_0;
  input   signed [15:0] dataIn_re;  // sfix16_En14
  input   signed [15:0] dataIn_im;  // sfix16_En14
  input   validIn;
  output  signed [15:0] ofdmData_re;  // sfix16_En14
  output  signed [15:0] ofdmData_im;  // sfix16_En14
  output  ofdmValid;


  wire Rising_Edge_Detector_out1;
  reg  Delay3_out1;
  reg  Unit_Delay_Enabled_Synchronous_out1;
  wire signed [15:0] Constant_out1_re;  // sfix16_En14
  wire signed [15:0] Constant_out1_im;  // sfix16_En14
  reg  Delay_out1;
  wire signed [15:0] Random_OFDM_Symbol_out1_re;  // sfix16_En14
  wire signed [15:0] Random_OFDM_Symbol_out1_im;  // sfix16_En14
  reg signed [15:0] Delay2_out1_re;  // sfix16_En14
  reg signed [15:0] Delay2_out1_im;  // sfix16_En14
  wire signed [15:0] Switch1_out1_re;  // sfix16_En14
  wire signed [15:0] Switch1_out1_im;  // sfix16_En14
  reg signed [15:0] Delay1_out1_re;  // sfix16_En14
  reg signed [15:0] Delay1_out1_im;  // sfix16_En14
  wire signed [15:0] Switch_out1_re;  // sfix16_En14
  wire signed [15:0] Switch_out1_im;  // sfix16_En14


  whdlOFDMTx_Rising_Edge_Detector_block u_Rising_Edge_Detector (.clk(clk),
                                                                .reset(reset),
                                                                .enb_1_32_0(enb_1_32_0),
                                                                .in(validIn),
                                                                .out(Rising_Edge_Detector_out1)
                                                                );

  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 1'b0;
      end
      else begin
        if (enb_1_32_0) begin
          Delay3_out1 <= Rising_Edge_Detector_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Unit_Delay_Enabled_Synchronous_process
      if (reset == 1'b1) begin
        Unit_Delay_Enabled_Synchronous_out1 <= 1'b0;
      end
      else begin
        if (enb_1_32_0 && Delay3_out1) begin
          Unit_Delay_Enabled_Synchronous_out1 <= Delay3_out1;
        end
      end
    end



  assign Constant_out1_re = 16'sb0000000000000000;
  assign Constant_out1_im = 16'sb0000000000000000;



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb_1_32_0) begin
          Delay_out1 <= validIn;
        end
      end
    end



  whdlOFDMTx_Random_OFDM_Symbol u_Random_OFDM_Symbol (.clk(clk),
                                                      .reset(reset),
                                                      .enb_1_32_0(enb_1_32_0),
                                                      .in(validIn),
                                                      .out_re(Random_OFDM_Symbol_out1_re),  // sfix16_En14
                                                      .out_im(Random_OFDM_Symbol_out1_im)  // sfix16_En14
                                                      );

  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1_re <= 16'sb0000000000000000;
        Delay2_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_32_0) begin
          Delay2_out1_re <= dataIn_re;
          Delay2_out1_im <= dataIn_im;
        end
      end
    end



  assign Switch1_out1_re = (Delay_out1 == 1'b0 ? Random_OFDM_Symbol_out1_re :
              Delay2_out1_re);
  assign Switch1_out1_im = (Delay_out1 == 1'b0 ? Random_OFDM_Symbol_out1_im :
              Delay2_out1_im);



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1_re <= 16'sb0000000000000000;
        Delay1_out1_im <= 16'sb0000000000000000;
      end
      else begin
        if (enb_1_32_0) begin
          Delay1_out1_re <= Switch1_out1_re;
          Delay1_out1_im <= Switch1_out1_im;
        end
      end
    end



  assign Switch_out1_re = (Unit_Delay_Enabled_Synchronous_out1 == 1'b0 ? Constant_out1_re :
              Delay1_out1_re);
  assign Switch_out1_im = (Unit_Delay_Enabled_Synchronous_out1 == 1'b0 ? Constant_out1_im :
              Delay1_out1_im);



  assign ofdmData_re = Switch_out1_re;

  assign ofdmData_im = Switch_out1_im;

  assign ofdmValid = Unit_Delay_Enabled_Synchronous_out1;

endmodule  // whdlOFDMTx_Make_OFDM_Valid_Continuous

